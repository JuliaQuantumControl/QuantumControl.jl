var documenterSearchIndex = {"docs":
[{"location":"api/quantum_control_base/","page":"QuantumControlBase","title":"QuantumControlBase","text":"EditURL = \"../../generate_api.jl\"","category":"page"},{"location":"api/quantum_control_base/#QuantumControlBase-Package","page":"QuantumControlBase","title":"QuantumControlBase Package","text":"","category":"section"},{"location":"api/quantum_control_base/#Index","page":"QuantumControlBase","title":"Index","text":"","category":"section"},{"location":"api/quantum_control_base/","page":"QuantumControlBase","title":"QuantumControlBase","text":"Pages   = [\"quantum_control_base.md\"]","category":"page"},{"location":"api/quantum_control_base/#QuantumControlBaseAPI","page":"QuantumControlBase","title":"QuantumControlBase","text":"","category":"section"},{"location":"api/quantum_control_base/#Public","page":"QuantumControlBase","title":"Public","text":"","category":"section"},{"location":"api/quantum_control_base/","page":"QuantumControlBase","title":"QuantumControlBase","text":"QuantumControlBase.@optimize_or_load\nQuantumControlBase.ControlProblem\nQuantumControlBase.Objective\nQuantumControlBase.WeightedObjective\nQuantumControlBase.chain_infohooks\nQuantumControlBase.default_optimization_savename_kwargs\nQuantumControlBase.discretize\nQuantumControlBase.discretize_on_midpoints\nQuantumControlBase.get_control_parameters\nQuantumControlBase.get_tlist_midpoints\nQuantumControlBase.getcontrols\nQuantumControlBase.liouvillian\nQuantumControlBase.load_optimization\nQuantumControlBase.optimization_savename\nQuantumControlBase.optimize\nQuantumControlBase.propagate_objective","category":"page"},{"location":"api/quantum_control_base/#QuantumControlBase.@optimize_or_load","page":"QuantumControlBase","title":"QuantumControlBase.@optimize_or_load","text":"Run optimize and store the result, or load the result if it exists.\n\nresult, file = @optimize_or_load(\n    path=\"\",\n    problem;\n    method=<method>,\n    filename=nothing,\n    suffix=\"jld2\",\n    prefix=DrWatson.default_prefix(config),\n    tag=DrWatson.readenv(\"DRWATSON_TAG\", true),\n    gitpath=DrWatson.projectdir(),\n    storepatch::Bool=DrWatson.readenv(\"DRWATSON_STOREPATCH\", false),\n    force=false,\n    verbose=true,\n    wsave_kwargs=Dict(),\n    savename_kwargs=DEFAULT_OPTIMIZATION_SAVENAME_KWARGS,\n    metadata=nothing,\n    dry_run=false,\n    kwargs...\n)\n\nruns result = optimize(problem; method=<method>, kwargs...) and stores result in an automatically named file inside path. The automatic file name is determined by optimization_savename and can be overriden by passing an explicit filename. The full path to the output file (joinpath(path, filename)) is returned as file.\n\nIn addition to the result, the data in the output file may also contain some metadata, e.g. (automatically) \"gitcommit\" containing the git commit hash of the project the produced the file, and \"script\" with the file name and line number where @optimize_or_load was called, see load_optimization. If metadata is given as a dict on input, the data it contains will be included in the output file.\n\nIf file already exists (and force=false), load the result from that file instead of running the optimization.\n\nIf dry_run=true, return (nothing, file). Depending on verbose, this will print information about whether file would be loaded or generated.\n\nThe @optimize_or_load macro is intended to integrate well with the DrWatson framework for scientific projects and utilizes several configuration options and utility functions from DrWatson, see below. Note that even though DrWatson is recomended, you are not required to use if for your projects in order to use @optimize_or_load or any other part of QuantumControl.\n\nI/O Keywords\n\nThe following keyword arguments determine where the result is stored and in which format.\n\nfilename: A file name to override the automatic file name. The filename  should not contain slashes: use path for the folder where filename  should be created.\nsuffix, prefix, savename_kwargs: Parameters for optimization_savename, which determines the automatic file name\ntag: Whether to record the current \"gitcommit\" as metadata alongside the  optimization result, via  DrWatson.tagsave.  If not given explicitly, determine automatically from suffix or the  extension of filename.\ngitpath, storepatch: Passed to DrWatson.tagsave if tag is true.\nforce: If true, run and store the optimization regardless of whether file already exists.\nverbose: If true, print info about the process, if file does not exist.\nwsave_kwargs: Additional keyword arguments to pass to DrWatson.wsave, e.g., to enable compression\n\nAll other keyword arguments are passed directly to optimize.\n\nRelated Functions\n\noptimization_savename: Function that determines the automatic filename\nDrWatson.@produce_or_load: The lower-level backend implementing the functionality of @optimize_or_load.\nload_optimization: Function to load a file produced by @optimize_or_load\n\n\n\n\n\n","category":"macro"},{"location":"api/quantum_control_base/#QuantumControlBase.ControlProblem","page":"QuantumControlBase","title":"QuantumControlBase.ControlProblem","text":"A full control problem with multiple objectives.\n\nControlProblem(\n   objectives=<list of objectives>,\n   pulse_options=<dict of controls to pulse options>,\n   tlist=<time grid>,\n   kwargs...\n)\n\nNote that the control problem can only be instantiated via keyword arguments.\n\nThe objectives are a list of AbstractControlObjective instances, each defining an initial state and a dynamical generator for the evolution of that state. Usually, the objective will also include a target state (see Objective) and possibly a weight (see WeightedObjective).\n\nThe pulse_options are a dictionary (IdDict) mapping controls that occur in the objectives to properties specific to the control method.\n\nThe tlist is the time grid on which the time evolution of the initial states of each objective should be propagated.\n\nThe remaining kwargs are keyword arguments that are passed directly to the optimal control method. These typically include e.g. the optimization functional.\n\nThe control problem is solved by finding a set of controls that simultaneously fulfill all objectives.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_control_base/#QuantumControlBase.Objective","page":"QuantumControlBase","title":"QuantumControlBase.Objective","text":"Standard optimization objective.\n\nObjective(;\n    initial_state=<initial_state>,\n    generator=<genenerator>,\n    target_state=<target_state>\n)\n\ndescribes an optimization objective where the time evoluation of the given initial_state under the given generator aims towards target_state. The generator here is e.g. a time-dependent Hamiltonian or Liouvillian.\n\nThe most common control problems in quantum control, e.g. state-to-state transitions or quantum gate implementations can be expressed by simultaneously fulfilling multiple objectives of this type.\n\nNote that the objective can only be instantiated via keyword arguments.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_control_base/#QuantumControlBase.WeightedObjective","page":"QuantumControlBase","title":"QuantumControlBase.WeightedObjective","text":"Standard optimization objective with a weight.\n\nWeightedObjective(;\n    initial_state=<initial_state>,\n    generator=<genenerator>,\n    target_state=<target_state>,\n    weight=<weight>\n)\n\ninitializes a control objective like Objective, but with an additional weight parameter (a float generally between 0 and 1) that weights the objective relative to other objectives that are part of the same control problem.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_control_base/#QuantumControlBase.chain_infohooks","page":"QuantumControlBase","title":"QuantumControlBase.chain_infohooks","text":"Combine multiple info_hook functions.\n\nchain_infohooks(funcs...)\n\ncombines funcs into a single Function that can be passes as info_hook to ControlProblem or any optimize-function.\n\nEach function in func must be a suitable info_hook by itself. This means that it should receive the optimization workspace object as its first positional parameter, then positional parameters specific to the optimization method, and then an arbitrary number of data parameters. It must return either nothing or a tuple of \"info\" objects (which will end up in the records field of the optimization result).\n\nWhen chaining infohooks, the funcs will be called in series, and the \"info\" objects will be accumulated into a single result tuple. The combined results from previous funcs will be given to the subsequent funcs as data parameters. This allows for the infohooks in the chain to communicate.\n\nThe chain will return the final combined result tuple, or nothing if all funcs return nothing.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.default_optimization_savename_kwargs","page":"QuantumControlBase","title":"QuantumControlBase.default_optimization_savename_kwargs","text":"Set the default savename_kwargs for optimization_savename.\n\nsavename_kwargs = default_optimization_savename_kwargs(;kwargs...)\n\nsets entries in the DEFAULT_OPTIMIZATION_SAVENAME_KWARGS used in optimization_savename and thus determines the automatic name used to store optimization results.\n\nUse\n\ndefault_optimization_savename_kwargs(reset=true)\n\nto clear the settings from any previous call to default_optimization_savename_kwargs.\n\nThe following keyword arguments are supported, cf. DrWatson.savename:\n\naccesses - List of strings indicating which fields (keys in kwargs of ControlProblem or kwargs of optimize/@optimize_or_load) can be included in the output filename. By default, all fields with values matching allowedtypes (excluding anonymous functions) are used.\nallowedtypes - List of types of values eligible to be included in the filename. Defaults to [Real, String, Symbol, TimeType, Function]\nconnector - String used to separate key-value pairs in the output filename. Defaults to \"_\".\ndigits - Used in round when formatting numbers, if no custom val_to_string.\nequals - String used between keys and values. Defaults to \"=\".\nignores - List of strings indicating which fields should be ignored.\nsigdigits - Used in round when formatting numbers, if no custom val_to_string.\nsort - Whether to sort the fields alphabetically (default). If false, the resulting file name my not be stable.\nval_to_string - Function to convert values to string.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.discretize","page":"QuantumControlBase","title":"QuantumControlBase.discretize","text":"Evaluate control at every point of tlist.\n\nvalues = discretize(control, tlist; via_midpoints=true)\n\ndiscretizes the given control to a Vector of values defined on the points of tlist.\n\nIf control is a function, it will will first be evaluated at the midpoint of tlist, see discretize_on_midpoints, and then the values on the midpoints are converted to values on tlist. This discretization is more stable than directly evaluationg the control function at the values of tlist, and ensures that repeated round-trips between discretize and discretize_on_midpoints can be done safely, see the note in the documentation of discretize_on_midpoints.\n\nThe latter can still be achieved by passing via_midpoints=false. While such a direct discretization is suitable e.g. for plotting, but it is unsuitable for round-trips between discretize and discretize_on_midpoints  (constant controls on tlist may result in a zig-zag on the intervals of tlist).\n\nIf control is a vector, it will be returned un-modified if it is of the same length as tlist. Otherwise, control must have one less value than tlist, and is assumed to be defined on the midpoins of tlist. In that case, discretize acts as the inverse of discretize_on_midpoints. See discretize_on_midpoints for how control values on tlist and control values on the intervals of tlist are related.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.discretize_on_midpoints","page":"QuantumControlBase","title":"QuantumControlBase.discretize_on_midpoints","text":"Evaluate control at the midpoints of tlist.\n\nvalues = discretize_on_midpoints(control, tlist)\n\ndiscretizes the given control to a Vector of values on the midpoints of tlist. Hence, the resulting values will contain one less value than tlist.\n\nIf control is a vector of values defined on tlist (i.e., of the same length as tlist), it will be converted to a vector of values on the intervals of tlist. The value for the first and last \"midpoint\" will remain the original values at the beginning and end of tlist, in order to ensure exact bounary conditions. For all other midpoints, the value for that midpoint will be calculated by \"un-averaging\".\n\nFor example, for a control and tlist of length 5, consider the following diagram:\n\ntlist index:       1   2   3   4   5\ntlist:             ⋅   ⋅   ⋅   ⋅   ⋅   input values cᵢ (i ∈ 1..5)\n                   |̂/ ̄ ̄ ̂\\ / ̂\\ / ̂ ̄ ̄\\|̂\nmidpoints:         x     x   x     x   output values pᵢ (i ∈ 1..4)\nmidpoints index:   1     2   3     4\n\nWe will have p₁=c₁ for the first value, p₄=c₅ for the last value. For all other points, the control values cᵢ = fracp_i-1 + p_i2 are the average of the values on the midpoints. This implies the \"un-averaging\" for the midpoint values pᵢ = 2 c_i - p_i-1.\n\nnote: Note\nAn arbitrary input control array may not be compatible with the above averaging formula. In this case, the conversion will be \"lossy\" (discretize will not recover the original control array; the difference should be considered a \"discretization error\"). However, any further round-trip conversions between points and intervals are bijective and preserve the boundary conditions. In this case, the discretize_on_midpoints and discretize methods are each other's inverse. This also implies that for an optimal control procedure, it is safe to modify midpoint values. Modifying the the values on the time grid directly on the other hand may accumulate discretization errors.\n\nIf control is a vector of one less length than tlist, it will be returned unchanged, under the assumption that the input is already properly discretized.\n\nIf control is a function, the function will be directly evaluated at the midpoints marked as x in the above diagram..\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.get_control_parameters","page":"QuantumControlBase","title":"QuantumControlBase.get_control_parameters","text":"Collect all control parameters from the given objectives.\n\nget_control_parameters(objectives...; kwargs...)\n\nreturns a vector of control parameters extracted from the controls in objectives. This first extracts the controls with [getcontrols] and then the \"control parameters\" from each control. What are the \"control parameters\" are depends on the type of the control. For controls that are function ϵ(t), the control parameters are the values of the control function on intervals of the time grid. The time grid in the case must be passed as a keyword argument tlist.\n\nThe control parameters for multiple controls will be concatenated in the returned vector.\n\n\n\n\n\nget_control_parameters(func; tlist, on_midpoints=true)\n\nreturns the control parameters of a control function by discretizing to the time grid in tlist. By default, the discretization is on intervals (midpoints) of the time grid. With on_midpoints=false, the discretization will be on the actual points of the time grid.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.get_tlist_midpoints","page":"QuantumControlBase","title":"QuantumControlBase.get_tlist_midpoints","text":"Shift time grid values the interval midpoints\n\ntlist_midpoints = get_tlist_midpoints(tlist)\n\ntakes a vector tlist of length n and returns a vector of length n-1 containing the midpoint values of each interval. The intervals in tlist are not required to be uniform.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.getcontrols","page":"QuantumControlBase","title":"QuantumControlBase.getcontrols","text":"Extract a Tuple of controls.\n\ncontrols = getcontrols(generator)\n\nextracts the controls from a single dynamical generator.\n\ncontrols = getcontrols(objectives)\n\nextracts the controls from a list of objectives (i.e., from each objective's generator)\n\nIn either case, controls that occur multiple times, either in a single generator, or throughout the different objectives, will occur only once in the result.\n\nBy default, assumes that any generator is a nested Tuple, e.g. (H0, (H1, ϵ1), (H2, ϵ2), ...) and extracts (ϵ1, ϵ2)\n\nEach control must be a valid argument for discretize.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.liouvillian","page":"QuantumControlBase","title":"QuantumControlBase.liouvillian","text":"Construct a Liouvillian super-operator.\n\nℒ = liouvillian(Ĥ, c_ops=(); convention=:LvN)\n\ncalculates the sparse Liouvillian super-operator ℒ from the Hamiltonian Ĥ and a list c_ops of Lindblad operators.\n\nWith convention=:LvN, applying the resulting ℒ to a vectorized density matrix ρ⃗ calculates fracddt vecrho(t) = ℒ vecrho(t) equivalent to the Liouville-von-Neumann equation for the density matrix ρ,\n\nfracddt ρ(t)\n= -i H ρ(t) + sum_kleft(\n    A_k ρ A_k^dagger\n    - frac12 A_k^dagger A_k ρ\n    - frac12 ρ A_k^dagger A_k\n  right)\n\nwhere the Lindblad operators A_k are the elements of c_ops.\n\nThe Hamiltonian H may be time-dependent, using a nested-tuple format by default, e.g., (Ĥ₀, (H₁, ϵ₁), (H₂, ϵ₂)), where ϵ₁ and ϵ₂ are functions of time. In this case, the resulting ℒ will also be in nested tuple format, ℒ = (ℒ₀, (ℒ₁, ϵ₁), (ℒ₂, ϵ₂)), where the initial element contains the superoperator ℒ₀ for the static component of the Liouvillian, i.e., the commutator with the drift Hamiltonian Ĥ₀, plus the dissipator (sum over k), as a sparse matrix. Time-dependent Lindblad operators are not supported. The remaining elements are tuples (ℒ₁, ϵ₁) and (ℒ₂, ϵ₂) corresponding to the commutators with the two control Hamiltonians, where ℒ₁ and ℒ₂ again are sparse matrices.\n\nIf H is not time-dependent, the resulting ℒ will be a single-element tuple containing the Liouvillian as a sparse matrix, ℒ = (ℒ₀, ).\n\nWith convention=:TDSE, the Liouvillian will be constructed for the equation of motion -i hbar fracddt vecrho(t) = ℒ vecrho(t) to match exactly the form of the time-dependent Schrödinger equation. While this notation is not standard in the literature of open quantum systems, it has the benefit that the resulting ℒ can be used in a numerical propagator for a (non-Hermitian) Schrödinger equation without any change. Thus, for numerical applications, convention=:TDSE is generally preferred. The returned ℒ between the two conventions differs only by a factor of i, since we generally assume hbar=1.\n\nThe convention keyword argument is mandatory, to force a conscious choice.\n\nSee Goerz et. al. \"Optimal control theory for a unitary operation under dissipative evolution\", arXiv 1312.0111v2, Appendix B.2 for the explicit construction of the Liouvillian superoperator as a sparse matrix.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.load_optimization","page":"QuantumControlBase","title":"QuantumControlBase.load_optimization","text":"Load a previously stored optimization.\n\nresult = load_optimization(filename; verbose=true, kwargs...)\n\nrecovers a result previously stored by @optimize_or_load.\n\nresult, metadata = load_optimization(filename; return_metadata=true, kwargs...)\n\nalso obtains a metadata dict containing e.g., \"gitcommit\" or \"script\" depending on the options to @optimize_or_load.\n\nCalling load_optimization with verbose=true (default) will show the metadata after loading the file.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.optimization_savename","page":"QuantumControlBase","title":"QuantumControlBase.optimization_savename","text":"Determine an automatic filename for storing an optimization result.\n\nfile = optimization_savename(\n    path=\"\",\n    problem;\n    method=<method>,\n    suffix=\"jld2\",\n    prefix=\"\",\n    savename_kwargs=DEFAULT_OPTIMIZATION_SAVENAME_KWARGS,\n    kwargs...,\n)\n\nfinds an appropriate automatic filename for the result of optimize(problem; method=<method>, kwargs...).\n\nBy default, the file has the structure <path>/<prefix>_<key1>=<value1>_..._<keyN>=<valueN>_method=<method>.jld2 where the key-value pairs are a subset of the keyword arguments used to instantiate problem, respectively the keyword arguments in kwargs. The prefix is best used as a \"name\" for the optimization problem to ensure a unique file name.\n\nWhich key-value pairs that are taken into account and the way they are formatted can be customized via savename_kwargs. See default_optimization_savename_kwargs for the supported options.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.optimize","page":"QuantumControlBase","title":"QuantumControlBase.optimize","text":"Optimize a quantum control problem.\n\nopt_result = optimize(problem; method=<method>, kwargs...)\n\noptimizes towards a solution of given problem with the given optimization method. Any keyword argument temporarily overrides the corresponding keyword argument in problem.\n\n\n\n\n\nopt_result = optimize(problem; method=:krotov, kwargs...)\n\noptimizes problem using Krotov's method, see Krotov.optimize_krotov.\n\n\n\n\n\nopt_result = optimize(problem; method=:GRAPE, kwargs...)\n\noptimizes problem using GRadident Ascent Pulse Engineering (GRAPE), see GRAPE.optimize_grape.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.propagate_objective","page":"QuantumControlBase","title":"QuantumControlBase.propagate_objective","text":"Propagate with the dynamical generator of a control objective.\n\npropagate_objective(obj, tlist; method=:auto, initial_state=obj.initial_state,\n                    controls_map=IdDict(), kwargs...)\n\npropagates initial_state under the dynamics described by obj.generator.\n\nThe optional dict control_map may be given to replace the controls in obj.generator (as obtained by getcontrols) with custom functions or vectors, e.g. with the controls resulting from optimization.\n\nIf obj has a property/field prop_method or fw_prop_method, its value will be used as the default for method instead of :auto. An explicit keyword argument for method always overrides the default.\n\nAll other kwargs are forwarded to the underlying QuantumPropagators.propagate method for obj.initial_state.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#Private","page":"QuantumControlBase","title":"Private","text":"","category":"section"},{"location":"api/quantum_control_base/","page":"QuantumControlBase","title":"QuantumControlBase","text":"QuantumControlBase.initobjpropwrk\nQuantumControlBase.GradVector\nQuantumControlBase.evalcontrols!\nQuantumControlBase.objective_genfunc\nQuantumControlBase.getcontrolderiv\nQuantumControlBase.GradGenerator\nQuantumControlBase.getcontrolderivs\nQuantumControlBase.TimeDependentGradGenerator\nQuantumControlBase.evalcontrols\nQuantumControlBase.resetgradvec!\nQuantumControlBase.AbstractControlObjective","category":"page"},{"location":"api/quantum_control_base/#QuantumControlBase.initobjpropwrk","page":"QuantumControlBase","title":"QuantumControlBase.initobjpropwrk","text":"wrk = initobjpropwrk(obj, tlist, method; kwargs...)\n\ninitializes a workspace for the propagation of an AbstractControlObjective.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.GradVector","page":"QuantumControlBase","title":"QuantumControlBase.GradVector","text":"Extended state-vector for the dynamic gradient.\n\nΨ̃ = GradVector(Ψ, num_controls)\n\nfor an initial state Ψ and num_controls control fields.\n\nThe GradVector conceptually corresponds to a direct-sum (block) column-vector Ψ = (Ψ₁ Ψ₂  Ψₙ Ψ)^T, where n is num_controls. With a matching G as in the documentation of TimeDependentGradGenerator, we have\n\nG Ψ = beginpmatrix\nH Ψ₁ + H₁Ψ \nvdots \nH Ψₙ + HₙΨ \nH Ψ\nendpmatrix\n\nand\n\ne^-i G dt beginpmatrix 0  vdots  0  Ψ endpmatrix\n= beginpmatrix\nfracϵ₁ e^-i H dt Ψ \nvdots \nfracϵₙ e^-i H dt Ψ \ne^-i H dt Ψ\nendpmatrix\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_control_base/#QuantumControlBase.evalcontrols!","page":"QuantumControlBase","title":"QuantumControlBase.evalcontrols!","text":"In-place version of evalcontrols.\n\nevalcontrols!(G, generator, vals_dict)\n\nacts as evalcontrols, but modifies G in-place.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.objective_genfunc","page":"QuantumControlBase","title":"QuantumControlBase.objective_genfunc","text":"Construct a genfunc suitable for propagating an objective.\n\ngenfunc = objective_genfunc(obj, tlist; controls_map=IdDict())\n\ncan be passed to QuantumPropagators.propagate to propagate under the dynamical generator in obj.\n\nIf given, control_map defines replacements for the controls in obj.generator. This allows, e.g., to replace the controls with those resulting from an optimization.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.getcontrolderiv","page":"QuantumControlBase","title":"QuantumControlBase.getcontrolderiv","text":"Get the derivative of the generator G w.r.t. the control ϵ(t).\n\nμ  = getcontrolderiv(generator, control)\n\nreturns nothing if the generator (Hamiltonian or Liouvillian) does not depend on control, or a function μ(v) that evaluates\n\nμ(v) = leftfracGϵ(t)rightvert_ϵ(t)=v\n\notherwise. That is, a call μ(v) will return the static operator resulting from evaluating the derivative of the dynamical generator G with respect to the control filed ϵ(t) at a particular point in time where the control field takes the value v.\n\nNote that for the common case of linear control terms, e.g., H = H_0 + sum_l ϵ_l(t) H_l, the derivative Hϵ_l(t) is simply the control Hamiltonian H_l. Thus, the resulting function μ will simply return H_l, ignoring the argument v.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.GradGenerator","page":"QuantumControlBase","title":"QuantumControlBase.GradGenerator","text":"Static generator for the standard dynamic gradient.\n\nG::GradGenerator = evalcontrols(G_of_t::TimeDependentGradGenerator, vals_dict)\n\nis the result of plugging in specific values for all controls in a TimeDependentGradGenerator. See evalcontrols and evalcontrols!.\n\nThe resulting object can be multiplied directly with a GradVector, e.g., in the process of evaluating a piecewise-constant time propagation.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_control_base/#QuantumControlBase.getcontrolderivs","page":"QuantumControlBase","title":"QuantumControlBase.getcontrolderivs","text":"Get a vector of the derivatives of generator w.r.t. each control.\n\ngetcontrolderivs(generator, controls)\n\nreturn as vector containing the derivative of generator with respect to each control in controls. The elements of the vector are either nothing if generator does not depend on that particular control, or a function μ(α) that evaluates the derivative for a particular value of the control, see getcontrolderiv.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.TimeDependentGradGenerator","page":"QuantumControlBase","title":"QuantumControlBase.TimeDependentGradGenerator","text":"Extended generator for the standard dynamic gradient.\n\nG̃ = TimeDependentGradGenerator(G)\n\ncontains the original time-dependent generator G (a Hamiltonian or Liouvillian) in G̃.G, a vector of control derivatives Gϵₗ(t) in G̃.control_derivs, and the controls in G̃.controls.\n\nFor a generator G = H(t) = H₀ + ϵ₁(t) H₁ +  +  ϵₙ(t) Hₙ, this extended generator encodes the block-matrix\n\nG = beginpmatrix\n         H(t)    0      dots     0       H₁     \n         0       H(t)   dots     0       H₂     \n    vdots              ddots            vdots \n         0       0      dots     H(t)    Hₙ     \n         0       0      dots     0       H(t)\nendpmatrix\n\nNote that the Gϵₗ(t) (Hₗ in the above example) are functions, to account for the possibility of non-linear control terms, see getcontrolderiv.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_control_base/#QuantumControlBase.evalcontrols","page":"QuantumControlBase","title":"QuantumControlBase.evalcontrols","text":"Replace the controls in generator with static values.\n\nG = evalcontrols(generator, vals_dict)\n\nreplaces the time-dependent controls in generator with the values in vals_dict and returns the static operator G.\n\nThe vals_dict is a dictionary (IdDict) mapping controls as returned by getcontrols(generator) to values.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.resetgradvec!","page":"QuantumControlBase","title":"QuantumControlBase.resetgradvec!","text":"Reset the given gradient vector for a new gradient evaluation.\n\nresetgradvec!(Ψ̃::GradVector)\n\nzeroes out Ψ̃.grad_states but leaves Ψ̃.state unaffected.\n\nresetgradvec!(Ψ̃::GradVector, Ψ)\n\nadditionally sets Ψ̃.state to Ψ.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.AbstractControlObjective","page":"QuantumControlBase","title":"QuantumControlBase.AbstractControlObjective","text":"Base class for a single optimization objective.\n\nAll objectives must have a field initial_state and a field generator, at minimum.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_control_base/#QuantumControlBaseConditionalThreadsAPI","page":"QuantumControlBase","title":"QuantumControlBase.ConditionalThreads","text":"","category":"section"},{"location":"api/quantum_control_base/#Private-2","page":"QuantumControlBase","title":"Private","text":"","category":"section"},{"location":"api/quantum_control_base/","page":"QuantumControlBase","title":"QuantumControlBase","text":"QuantumControlBase.ConditionalThreads.@threadsif","category":"page"},{"location":"api/quantum_control_base/#QuantumControlBase.ConditionalThreads.@threadsif","page":"QuantumControlBase","title":"QuantumControlBase.ConditionalThreads.@threadsif","text":"Conditionally apply multi-threading to for loops.\n\nThis is a variation on Base.Threads.@threads that adds a run-time boolean flag to enable or disable threading. It is intended for internal use in packages building on QuantumControlBase.\n\nUsage:\n\nusing QuantumControlBase.ConditionalThreads: @threadsif\n\nfunction optimize(objectives; use_threads=true)\n    @threadsif use_threads for k = 1:length(objectives)\n    # ...\n    end\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/quantum_control_base/#QuantumControlBaseFunctionalsAPI","page":"QuantumControlBase","title":"QuantumControlBase.Functionals","text":"","category":"section"},{"location":"api/quantum_control_base/#Public-2","page":"QuantumControlBase","title":"Public","text":"","category":"section"},{"location":"api/quantum_control_base/","page":"QuantumControlBase","title":"QuantumControlBase","text":"QuantumControlBase.Functionals.F_re\nQuantumControlBase.Functionals.F_sm\nQuantumControlBase.Functionals.F_ss\nQuantumControlBase.Functionals.J_T_re\nQuantumControlBase.Functionals.J_T_sm\nQuantumControlBase.Functionals.J_T_ss\nQuantumControlBase.Functionals.chi_re!\nQuantumControlBase.Functionals.chi_sm!\nQuantumControlBase.Functionals.chi_ss!\nQuantumControlBase.Functionals.grad_J_T_sm!","category":"page"},{"location":"api/quantum_control_base/#QuantumControlBase.Functionals.F_re","page":"QuantumControlBase","title":"QuantumControlBase.Functionals.F_re","text":"Real-part fidelity.\n\nF_re(ϕ, objectives; τ=nothing)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.Functionals.F_sm","page":"QuantumControlBase","title":"QuantumControlBase.Functionals.F_sm","text":"Square-modulus fidelity.\n\nF_sm(ϕ, objectives; τ=nothing)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.Functionals.F_ss","page":"QuantumControlBase","title":"QuantumControlBase.Functionals.F_ss","text":"State-to-state phase-insensitive fidelity.\n\nF_ss(ϕ, objectives; τ=nothing)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.Functionals.J_T_re","page":"QuantumControlBase","title":"QuantumControlBase.Functionals.J_T_re","text":"Real-part functional.\n\nJ_T_re(ϕ, objectives; τ=nothing)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.Functionals.J_T_sm","page":"QuantumControlBase","title":"QuantumControlBase.Functionals.J_T_sm","text":"Square-modulus functional.\n\nJ_T_sm(ϕ, objectives; τ=nothing)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.Functionals.J_T_ss","page":"QuantumControlBase","title":"QuantumControlBase.Functionals.J_T_ss","text":"State-to-state phase-insensitive functional.\n\nJ_T_ss(ϕ, objectives; τ=nothing)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.Functionals.chi_re!","page":"QuantumControlBase","title":"QuantumControlBase.Functionals.chi_re!","text":"Krotov-states χ for functional J_T_re.\n\nchi_re!(χ, ϕ, objectives; τ=nothing)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.Functionals.chi_sm!","page":"QuantumControlBase","title":"QuantumControlBase.Functionals.chi_sm!","text":"Krotov-states χ for functional J_T_sm.\n\nchi_sm!(χ, ϕ, objectives; τ=nothing)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.Functionals.chi_ss!","page":"QuantumControlBase","title":"QuantumControlBase.Functionals.chi_ss!","text":"Krotov-states χ for functional J_T_ss.\n\nchi_ss!(χ, ϕ, objectives; τ=nothing)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.Functionals.grad_J_T_sm!","page":"QuantumControlBase","title":"QuantumControlBase.Functionals.grad_J_T_sm!","text":"Gradient for J_T_sm.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#Private-3","page":"QuantumControlBase","title":"Private","text":"","category":"section"},{"location":"api/quantum_control_base/","page":"QuantumControlBase","title":"QuantumControlBase","text":"QuantumControlBase.Functionals.f_tau","category":"page"},{"location":"api/quantum_control_base/#QuantumControlBase.Functionals.f_tau","page":"QuantumControlBase","title":"QuantumControlBase.Functionals.f_tau","text":"Average complex overlap of the target states with forward-propagated states.\n\nf_tau(ϕ, objectives; τ=nothing)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBaseShapesAPI","page":"QuantumControlBase","title":"QuantumControlBase.Shapes","text":"","category":"section"},{"location":"api/quantum_control_base/#Public-3","page":"QuantumControlBase","title":"Public","text":"","category":"section"},{"location":"api/quantum_control_base/","page":"QuantumControlBase","title":"QuantumControlBase","text":"QuantumControlBase.Shapes.blackman\nQuantumControlBase.Shapes.box\nQuantumControlBase.Shapes.flattop","category":"page"},{"location":"api/quantum_control_base/#QuantumControlBase.Shapes.blackman","page":"QuantumControlBase","title":"QuantumControlBase.Shapes.blackman","text":"Blackman window shape.\n\nblackman(t, t₀, T; a=0.16)\n\ncalculates\n\nB(t t_0 T) =\n    frac12left(\n        1 - a - cosleft(2π fract - t_0T - t_0right)\n        + a cosleft(4π fract - t_0T - t_0right)\n    right)\n\nfor a scalar t, with a = 0.16.\n\nSee http://en.wikipedia.org/wiki/Window_function#Blackman_windows\n\nA Blackman shape looks nearly identical to a Gaussian with a 6-sigma interval between t₀ and T.  Unlike the Gaussian, however, it will go exactly to zero at the edges. Thus, Blackman pulses are often preferable to Gaussians.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.Shapes.box","page":"QuantumControlBase","title":"QuantumControlBase.Shapes.box","text":"Box shape (Theta-function).\n\nbox(t, t₀, T)\n\nevaluates the Heaviside (Theta-) function Theta(t) = 1 for t_0 le t le T; and Theta(t) = 0 otherwise.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.Shapes.flattop","page":"QuantumControlBase","title":"QuantumControlBase.Shapes.flattop","text":"Flat shape (amplitude 1.0) with a switch-on/switch-off from zero.\n\nflattop(t; T, t_rise, t₀=0.0, t_fall=t_rise, func=:blackman)\n\nevaluates a shape function that starts at 0 at t=t₀, and ramps to to 1 during the t_rise interval. The function then remains at value 1, before ramping down to 0 again during the interval t_fall before T. For t  t₀ and t  T, the shape is zero.\n\nThe default switch-on/-off shape is half of a Blackman window (see blackman).\n\nFor func=:sinsq, the switch-on/-off shape is a sine-squared curve.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBaseTestUtilsAPI","page":"QuantumControlBase","title":"QuantumControlBase.TestUtils","text":"","category":"section"},{"location":"api/quantum_control_base/#Public-4","page":"QuantumControlBase","title":"Public","text":"","category":"section"},{"location":"api/quantum_control_base/","page":"QuantumControlBase","title":"QuantumControlBase","text":"QuantumControlBase.TestUtils.dummy_control_problem\nQuantumControlBase.TestUtils.random_complex_matrix\nQuantumControlBase.TestUtils.random_complex_sparse_matrix\nQuantumControlBase.TestUtils.random_hermitian_matrix\nQuantumControlBase.TestUtils.random_hermitian_sparse_matrix\nQuantumControlBase.TestUtils.random_real_matrix\nQuantumControlBase.TestUtils.random_real_sparse_matrix\nQuantumControlBase.TestUtils.random_state_vector\nQuantumControlBase.TestUtils.test","category":"page"},{"location":"api/quantum_control_base/#QuantumControlBase.TestUtils.dummy_control_problem","page":"QuantumControlBase","title":"QuantumControlBase.TestUtils.dummy_control_problem","text":"Set up a dummy control problem.\n\nproblem = dummy_control_problem(;\n    N=10, n_objectives=1, n_controls=1, n_steps=50, dt=1.0, sparsity=0.5,\n    kwargs...)\n\nSets up a control problem with random (sparse) Hermitian matrices.\n\nArguments\n\nN: The dimension of the Hilbert space\nn_objectives: The number of objectives in the optimization. All objectives will have the same Hamiltonian, but random initial and target states.\nn_controls: The number of controls, that is, the number of control terms in the control Hamiltonian. Each control is an array of random values, normalized on the intervals of the time grid.\nn_steps: The number of time steps (intervals of the time grid)\ndt: The time step\nsparsity: The sparsity of the Hamiltonians, as a number between 0.0 and 1.0. For sparsity=1.0, the Hamiltonians will be dense matrices.\nkwargs: All other keyword arguments are passed on to ControlProblem\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.TestUtils.random_complex_matrix","page":"QuantumControlBase","title":"QuantumControlBase.TestUtils.random_complex_matrix","text":"Construct a random complex matrix of size N×N with spectral radius ρ.\n\nrandom_complex_matrix(N, ρ)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.TestUtils.random_complex_sparse_matrix","page":"QuantumControlBase","title":"QuantumControlBase.TestUtils.random_complex_sparse_matrix","text":"Construct a random sparse complex matrix.\n\nrandom_complex_sparse_matrix(N, ρ, sparsity)\n\nreturns a matrix of size N×N with spectral radius ρ and the given sparsity (number between zero and one that is the approximate fraction of non-zero elements).\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.TestUtils.random_hermitian_matrix","page":"QuantumControlBase","title":"QuantumControlBase.TestUtils.random_hermitian_matrix","text":"Construct a random Hermitian matrix of size N×N with spectral radius ρ.\n\nrandom_hermitian_matrix(N, ρ)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.TestUtils.random_hermitian_sparse_matrix","page":"QuantumControlBase","title":"QuantumControlBase.TestUtils.random_hermitian_sparse_matrix","text":"Construct a random sparse Hermitian matrix.\n\nrandom_hermitian_sparse_matrix(N, ρ, sparsity)\n\nreturns a matrix of size N×N with spectral radius ρ and the given sparsity (number between zero and one that is the approximate fraction of non-zero elements).\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.TestUtils.random_real_matrix","page":"QuantumControlBase","title":"QuantumControlBase.TestUtils.random_real_matrix","text":"Construct a random real-valued matrix of size N×N with spectral radius ρ.\n\nrandom_real_matrix(N, ρ)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.TestUtils.random_real_sparse_matrix","page":"QuantumControlBase","title":"QuantumControlBase.TestUtils.random_real_sparse_matrix","text":"Construct a random sparse real-valued matrix.\n\nrandom_real_sparse_matrix(N, ρ, sparsity)\n\nreturns a matrix of size N×N with spectral radius ρ and the given sparsity (number between zero and one that is the approximate fraction of non-zero elements).\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.TestUtils.random_state_vector","page":"QuantumControlBase","title":"QuantumControlBase.TestUtils.random_state_vector","text":"Return a random, normalized Hilbert space state vector of dimension N.\n\nrandom_state_vector(N)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.TestUtils.test","page":"QuantumControlBase","title":"QuantumControlBase.TestUtils.test","text":"Run a package test-suite in a subprocess.\n\ntest(\n    file=\"test/runtests.jl\";\n    root=pwd(),\n    project=\"test\",\n    code_coverage=\"user\",\n    show_coverage=(code_coverage == \"user\"),\n    color=<inherit>,\n    compiled_modules=<inherit>,\n    startup_file=<inherit>,\n    depwarn=<inherit>,\n    inline=<inherit>,\n    check_bounds=\"yes\",\n    track_allocation=<inherit>,\n    threads=<inherit>,\n    genhtml=false,\n    covdir=\"coverage\"\n)\n\nruns the test suite of the package located at root by running include(file) inside a new julia process.\n\nThis is similar to what Pkg.test() does, but differs in the \"sandboxing\" approach. While Pkg.test() creates a new temporary sandboxed environment, test() uses an existing environment in project (the test subfolder by default). This allows testing against the dev-versions of other packages. It requires that the test folder contains both a Project.toml and a Manifest.toml file.\n\nThe test() function also differs from directly including test/runtests.jl in the REPL in that it can generate coverage data and reports (this is only possible when running tests in a subprocess).\n\nIf show_coverage is passed as true (default), a coverage summary is shown. Further, if genhtml is true, a full HTML coverage report will be generated in covdir (relative to root). This requires the genhtml executable (part of the lcov package). Instead of true, it is also possible to pass the path to the genhtml exectuable.\n\nAll other keyword arguments correspond to the respective command line flag for the julia executable that is run as the subprocess.\n\nThis function is intended to be exposed in a project's development-REPL.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#Private-4","page":"QuantumControlBase","title":"Private","text":"","category":"section"},{"location":"api/quantum_control_base/","page":"QuantumControlBase","title":"QuantumControlBase","text":"QuantumControlBase.TestUtils.optimize_with_dummy_method\nQuantumControlBase.TestUtils.DummyOptimizationResult","category":"page"},{"location":"api/quantum_control_base/#QuantumControlBase.TestUtils.optimize_with_dummy_method","page":"QuantumControlBase","title":"QuantumControlBase.TestUtils.optimize_with_dummy_method","text":"Run a dummy optimization.\n\nresult = optimize(problem, method=:dummymethod)\n\nruns through and \"optimization\" of the given problem where in each iteration, the amplitude of the guess pulses is diminished by 10%. The (summed) vector norm of the the control serves as the value of the optimization functional.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.TestUtils.DummyOptimizationResult","page":"QuantumControlBase","title":"QuantumControlBase.TestUtils.DummyOptimizationResult","text":"Result returned by optimize_with_dummy_method.\n\n\n\n\n\n","category":"type"},{"location":"history/#History","page":"History","title":"History","text":"","category":"section"},{"location":"history/","page":"History","title":"History","text":"Each release of QuantumControl.jl is determined by the compatible versions of the JuliaQuantumControl packages.","category":"page"},{"location":"history/","page":"History","title":"History","text":"<table>\n    <thead class=\"membership-tiers text-left\">\n    <tr>\n        <th class=\"rotated-text\" scope=\"col\"><div><span>QuantumControl</span></div></th>\n        <th class=\"non-rotated-text\" scope=\"col\"><div><span>Release Date</span></div></th>\n        <th class=\"rotated-text\" scope=\"col\"><div><span>QuantumPropagators</span></div></th>\n        <th class=\"rotated-text\" scope=\"col\"><div><span>QuantumControlBase</span></div></th>\n        <th class=\"rotated-text\" scope=\"col\"><div><span>Krotov</span></div></th>\n        <th class=\"rotated-text\" scope=\"col\"><div><span>GRAPE</span></div></th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <th scope=\"row\">0.0.2</th>\n        <td>2021-10-02</td>\n        <td>^0.0</td>\n        <td>^0.0</td>\n        <td>^0.0</td>\n        <td>—</td>\n    </tr>\n    <tr>\n        <th scope=\"row\">0.0.3</th>\n        <td>2022-01-03</td>\n        <td>0.0.3</td><!-- QuantumPropagators -->\n        <td>0.0.3</td><!-- QuantumControlBase -->\n        <td>0.0.3</td><!-- Krotov -->\n        <td>0.0.2</td><!-- GRAPE -->\n    </tr>\n    <tr>\n        <th scope=\"row\">0.0.4</th>\n        <td>2022-02-07</td>\n        <td>0.1.0</td><!-- QuantumPropagators -->\n        <td>0.1.0</td><!-- QuantumControlBase -->\n        <td>0.1.0</td><!-- Krotov -->\n        <td>0.0.3</td><!-- GRAPE -->\n    </tr>\n    <tr>\n        <th scope=\"row\">0.1.0</th>\n        <td>2022-02-15</td>\n        <td>0.1</td><!-- QuantumPropagators -->\n        <td>0.2</td><!-- QuantumControlBase -->\n        <td>0.1</td><!-- Krotov -->\n        <td>0.1</td><!-- GRAPE -->\n    </tr>\n    </tbody>\n</table>","category":"page"},{"location":"api/grape/","page":"GRAPE","title":"GRAPE","text":"EditURL = \"../../generate_api.jl\"","category":"page"},{"location":"api/grape/#GRAPE-Package","page":"GRAPE","title":"GRAPE Package","text":"","category":"section"},{"location":"api/grape/#Index","page":"GRAPE","title":"Index","text":"","category":"section"},{"location":"api/grape/","page":"GRAPE","title":"GRAPE","text":"Pages   = [\"grape.md\"]","category":"page"},{"location":"api/grape/#GRAPEAPI","page":"GRAPE","title":"GRAPE","text":"","category":"section"},{"location":"api/grape/#Private","page":"GRAPE","title":"Private","text":"","category":"section"},{"location":"api/grape/","page":"GRAPE","title":"GRAPE","text":"GRAPE.optimize_grape\nGRAPE.print_table\nGRAPE.GrapeResult","category":"page"},{"location":"api/grape/#GRAPE.optimize_grape","page":"GRAPE","title":"GRAPE.optimize_grape","text":"Optimize a control problem using GRAPE.\n\nresult = optimize_grape(problem)\n\noptimizes the given control problem, returning a GrapeResult.\n\nnote: Note\nIt is recommended to call optimize with method=:GRAPE instead of calling optimize_grape directly.\n\nKeyword arguments that control the optimization are taken from the keyword arguments used in the instantiation of problem.\n\nRequired problem keyword arguments\n\nJ_T: A function J_T(ϕ, objectives, τ=τ) that evaluates the final time functional from a list ϕ of forward-propagated states and problem.objectives.\ngradient:  A function gradient!(G, τ, ∇τ) that stores the gradient of J_T in G.\n\nOptional problem keyword arguments\n\nupdate_hook: Not immplemented\ninfo_hook: A function that receives the same argumens as update_hook, in order to write information about the current iteration to the screen or to a file. The default info_hook prints a table with convergence information to the screen. Runs after update_hook. The info_hook function may return a tuple, which is stored in the list of records inside the GrapeResult object.\ncheck_convergence: A function to check whether convergence has been reached. Receives a GrapeResult object result, and should set result.converged to true and result.message to an appropriate string in case of convergence. Multiple convergence checks can be performed by chaining functions with ∘. The convergence check is performed after any calls to update_hook and info_hook.\nx_tol: Parameter for Optim.jl\nf_tol: Parameter for Optim.jl\ng_tol: Parameter for Optim.jl\nshow_trace: Parameter for Optim.jl\nextended_trace:  Parameter for Optim.jl\nshow_every: Parameter for Optim.jl\nallow_f_increases: Parameter for Optim.jl\noptimizer: An optional Optim.jl optimizer (Optim.AbstractOptimizer instance). If not given, an L-BFGS-B optimizer will be used.\nprop_method/fw_prop_method/bw_prop_method: The propagation method to use for each objective, see below.\nprop_method/fw_prop_method/grad_prop_method: The propagation method to use for the extended gradient vector for each objective, see below.\n\nThe propagation method for the forward propagation of each objective is determined by the first available item of the following:\n\na fw_prop_method keyword argument\na prop_method keyword argument\na property fw_prop_method of the objective\na property prop_method of the objective\nthe value :auto\n\nThe propagation method for the backword propagation is determined similarly, but with bw_prop_method instead of fw_prop_method. The propagation method for the forward propagation of the extended gradient vector for each objective is determined from grad_prop_method, fw_prop_method, prop_method in order of precedence.\n\n\n\n\n\n","category":"function"},{"location":"api/grape/#GRAPE.print_table","page":"GRAPE","title":"GRAPE.print_table","text":"Print optimization progress as a table.\n\nThis functions serves as the default info_hook for an optimization with GRAPE.\n\n\n\n\n\n","category":"function"},{"location":"api/grape/#GRAPE.GrapeResult","page":"GRAPE","title":"GRAPE.GrapeResult","text":"Result object returned by optimize_grape.\n\n\n\n\n\n","category":"type"},{"location":"api/krotov/","page":"Krotov","title":"Krotov","text":"EditURL = \"../../generate_api.jl\"","category":"page"},{"location":"api/krotov/#Krotov-Package","page":"Krotov","title":"Krotov Package","text":"","category":"section"},{"location":"api/krotov/#Index","page":"Krotov","title":"Index","text":"","category":"section"},{"location":"api/krotov/","page":"Krotov","title":"Krotov","text":"Pages   = [\"krotov.md\"]","category":"page"},{"location":"api/krotov/#KrotovAPI","page":"Krotov","title":"Krotov","text":"","category":"section"},{"location":"api/krotov/#Public","page":"Krotov","title":"Public","text":"","category":"section"},{"location":"api/krotov/","page":"Krotov","title":"Krotov","text":"Krotov.LogisticParametrization\nKrotov.LogisticSqParametrization\nKrotov.SquareParametrization\nKrotov.TanhParametrization\nKrotov.TanhSqParametrization","category":"page"},{"location":"api/krotov/#Krotov.LogisticParametrization","page":"Krotov","title":"Krotov.LogisticParametrization","text":"Parametrization with a Logistic function that enforces ϵmin < ϵ(t) < ϵmax.\n\n\n\n\n\n","category":"function"},{"location":"api/krotov/#Krotov.LogisticSqParametrization","page":"Krotov","title":"Krotov.LogisticSqParametrization","text":"Parametrization with a Logistic-Square function that enforces 0 ≤ ϵ(t) < ϵ_max.\n\n\n\n\n\n","category":"function"},{"location":"api/krotov/#Krotov.SquareParametrization","page":"Krotov","title":"Krotov.SquareParametrization","text":"Parametrization ϵ(t) = u²(t), enforcing pulse values ≥ 0.\n\n\n\n\n\n","category":"function"},{"location":"api/krotov/#Krotov.TanhParametrization","page":"Krotov","title":"Krotov.TanhParametrization","text":"Parametrization with a tanh function that enforces ϵmin < ϵ(t) < ϵmax.\n\n\n\n\n\n","category":"function"},{"location":"api/krotov/#Krotov.TanhSqParametrization","page":"Krotov","title":"Krotov.TanhSqParametrization","text":"Parametrization with a tanh² function that enforces 0  ϵ(t)  ϵ_max.\n\n\n\n\n\n","category":"function"},{"location":"api/krotov/#Private","page":"Krotov","title":"Private","text":"","category":"section"},{"location":"api/krotov/","page":"Krotov","title":"Krotov","text":"Krotov.optimize_krotov\nKrotov.KrotovResult\nKrotov.print_table\nKrotov.PulseParametrization\nKrotov.NoParametrization","category":"page"},{"location":"api/krotov/#Krotov.optimize_krotov","page":"Krotov","title":"Krotov.optimize_krotov","text":"Optimize a control problem using Krotov's method.\n\nresult = optimize_krotov(problem)\n\noptimizes the given control problem, returning a KrotovResult.\n\nnote: Note\nIt is recommended to call optimize with method=:krotov instead of calling optimize_krotov directly.\n\nKeyword arguments that control the optimization are taken from the keyword arguments used in the instantiation of problem.\n\nRequired problem keyword arguments\n\nJ_T: A function J_T(ϕ, objectives) that evaluates the final time functional from a list ϕ of forward-propagated states and problem.objectives.\nchi: A function chi!(χ, ϕ, objectives) what receives a list ϕ of the forward propagates state and must set χₖ=J_Tϕₖ.\n\nOptional problem keyword arguments\n\nThe following keyword arguments are supported (with default values):\n\nsigma=nothing: Function that calculate the second-order contribution. If not given, the first-order Krotov method is used.\niter_start=0: the initial iteration number\niter_stop=5000: the maximum iteration number\nprop_method/fw_prop_method/bw_prop_method: The propagation method to use for each objective, see below.\nupdate_hook: A function that receives the Krotov workspace, the iteration number, the list of updated pulses and the list of guess pulses as positional arguments. The function may mutate any of its arguments. This may be used e.g. to apply a spectral filter to the updated pulses, or to update propagation workspaces inside the Krotov workspace.\ninfo_hook: A function that receives the same argumens as update_hook, in order to write information about the current iteration to the screen or to a file. The default info_hook prints a table with convergence information to the screen. Runs after update_hook. The info_hook function may return a tuple, which is stored in the list of records inside the KrotovResult object.\ncheck_convergence: a function to check whether convergence has been reached. Receives a KrotovResult object result, and should set result.converged to true and result.message to an appropriate string in case of convergence. Multiple convergence checks can be performed by chaining functions with ∘. The convergence check is performed after any calls to update_hook and info_hook.\n\nThe propagation method for the forward propagation of each objective is determined by the first available item of the following:\n\na fw_prop_method keyword argument\na prop_method keyword argument\na property fw_prop_method of the objective\na property prop_method of the objective\nthe value :auto\n\nThe propagation method for the backword propagation is determined similarly, but with bw_prop_method instead of fw_prop_method.\n\n\n\n\n\n","category":"function"},{"location":"api/krotov/#Krotov.KrotovResult","page":"Krotov","title":"Krotov.KrotovResult","text":"Result object returned by optimize_krotov.\n\n\n\n\n\n","category":"type"},{"location":"api/krotov/#Krotov.print_table","page":"Krotov","title":"Krotov.print_table","text":"Print optimization progress as a table.\n\nThis functions serves as the default info_hook for an optimization with Krotov's method.\n\n\n\n\n\n","category":"function"},{"location":"api/krotov/#Krotov.PulseParametrization","page":"Krotov","title":"Krotov.PulseParametrization","text":"Specification for a \"time-local\" pulse parametrization.\n\nThe parametrization is given as a collection of three functions:\n\nϵ(u(t))\nu(ϵ(t))\nϵu as a function of u(t).\n\n\n\n\n\n","category":"type"},{"location":"api/krotov/#Krotov.NoParametrization","page":"Krotov","title":"Krotov.NoParametrization","text":"Parametrization where ϵ(t)  u(t).\n\n\n\n\n\n","category":"function"},{"location":"howto/#Howto","page":"Howto","title":"Howto","text":"","category":"section"},{"location":"howto/","page":"Howto","title":"Howto","text":"TODO","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"EditURL = \"../../generate_api.jl\"","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators-Package","page":"QuantumPropagators","title":"QuantumPropagators Package","text":"","category":"section"},{"location":"api/quantum_propagators/#Index","page":"QuantumPropagators","title":"Index","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Pages   = [\"quantum_propagators.md\"]","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagatorsAPI","page":"QuantumPropagators","title":"QuantumPropagators","text":"","category":"section"},{"location":"api/quantum_propagators/#Public","page":"QuantumPropagators","title":"Public","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.initpropwrk\nQuantumPropagators.propagate\nQuantumPropagators.propstep\nQuantumPropagators.propstep!","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.initpropwrk","page":"QuantumPropagators","title":"QuantumPropagators.initpropwrk","text":"Initialize a workspace for propagation.\n\nwrk = initpropwrk(state, tlist, method=:auto, generator...; kwargs...)\n\nThe resulting wrk can be passed to propagate or propstep!.\n\nArguments\n\nstate: An exemplary state for the propagation (e.g., the initial state)\ntlist: The time grid over which propagate will be called. Must include at least to points in order to determine the propagation time step to prepare. If the propagation will be over a tlist with a variable dt, the full tlist must be passed here.\ngenerator: An exemplary (non-time-dependent) dynamical generator. For full generality (if method=:cheby), the given generator should have a spectral range sufficiently large to encompass the entire propagation. If given multiple times, a spectral envelope enclosing all the generators will be determined automatically. In this case, you should pass the generators with the extremal values of all the controls.\nmethod: The propagation method to use. The default value of :auto attempts to choose the best method available, based on the properties of the given state, tlist, and generator. Alternative values are :cheby and :newton, and :expprop.\nspecrad_method: for method=:cheby, method to use for estimating the  spectral radius, see QuantumPropagators.SpectralRange.specrange.  Defaults to :auto.\ntolerance: for method=:cheby, a tolerance factor for the estimated spectral radius. That is, Chebychev coefficients will be calculated for a spectral radius increased by the tolerance factor compared to the specral radius estimated for the generator.\n\nAll other kwargs are filtered and passed to the contructor for returned workspace, e.g. limit for method=:cheby or m_max for method=:newton. For method=:cheby, they are also passed to specrange.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.propagate","page":"QuantumPropagators","title":"QuantumPropagators.propagate","text":"Propagate a state over an entire time grid.\n\nstate_out = propagate(\n    state, genfunc, tlist; method=:auto,\n    backwards=false; storage=nothing, observables=(<store state>, ),\n    hook=nothing, showprogress=false, control_parameters=nothing,\n    in_place=true, kwargs...)\n\npropagates state over the time grid in tlist, using piecewise-constant dynamical generators (Hamiltonians or Liouvillians) determined by genfunc, and returns the resulting propagated state. The propagation is performed by calling propstep! for every interval in tlist, or propstep if in_place=false.\n\nFor the i'th time interval, genfunc(tlist, i) must return the generator for that time interval. Generally, when approximating a time-continuous dynamical generator as piecewise-constant on the time grid, it should be evaluated at the midpoint of the interval. A possible exception is the first and last interval, which may be better evaluated at tlist[1] and tlist[end] to ensure exact boundary conditions like control fields that are exactly zero.\n\nIn addition to the two positional parameters indicating the time interval, genfunc will also receive the state (the input state for the propagation step), backwards, storage, observables, control_parameters, and init as keyword arguments.\n\nThe control_parameters are an optional array of floats with parameters for genfunc. This is required when propagate is used in the context of automatic differentiation (AD). E.g., the Zygote framework can automatically calculate gradients of a function control_parameters -> J_T, where J_T might be be a function of the overlap between a propagated state (returned by propagate) and a target state. Thus, the control_parameters must be explicit in propagate.  Outside of an AD context, control_parameters are not generally required: they can be implicit in genfunc.\n\nThe remaining keyword arguments may be used for unusual equations of motion beyond the standard Schrödinger or Liouville-von-Neumann equation, e.g. state would enter the genfunc for a Gross–Pitaevskii equation. For standard equations of motion that do not use the additional parameters, it is best to capture the keyword arguments to genfunc with a definition like\n\ngenfunc(tlist, i; kwargs...) = ...\n\nFor valid propagation methods, see initpropwrk.\n\nIn general, there is no requirement that tlist has a constant time step, although some propagation methods (most notably cheby!) only support a uniform time grid.\n\nIf storage is given as an Array, it will be filled with data determined by the observables. The default \"observable\" results in the propagated states at every point in time being stored. The storage array should be created with init_storage. See its documentation for details.\n\nThe storage parameter may also be given as true, and a new storage array will be created internally with init_storage and returned instead of the propagated state:\n\ndata = propagate(\n    state, genfunc, tlist; method=:auto\n    backwards=false; storage=true, observables=observables,\n    hook=nothing, showprogress=false, kwargs...)\n\nIf backwards is true, the input state is assumed to be at time tlist[end], and the propagation progresses backwards in time (with a negative time step dt). If storage is given, it will be filled back-to-front during the backwards propagation.\n\nIf hook is given as a callable, it will be called after each propagation step, as hook(state, generator, tlist, i, wrk, observables) where i is the index of the time interval on tlist covered by the propagation step (0 for the initial state, respectives lastindex(tlist) for the backward propagation).  The hook is called before calculating any observables. Example usage includes writing data to file, or modifying state, e.g., removing amplitude from the lowest and highest level to mitigate \"truncation error\".\n\nIf showprogress is given as true, a progress bar will be shown for long-running propagationn. In order to customize the progress bar, showprogress may also be a function that receives length(tlist) and returns a ProgressMeter.Progress instance.\n\nIf in_place=false is given, the propagation avoids in-place operations by using propstep instead of propstep!. This is often required in the context of automatic differentiation (AD), e.g., with Zygote. That is, use in_place=false if propagate is called inside a function to be passed to Zygote.gradient, Zygote.pullback, or a similar function. In and AD context, storage and showprogress should not be used.\n\nThe propagate routine returns the propagated state at tlist[end], respectively tlist[1] if backwards=true, or a storage array with the stored states / observable data if storage=true.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.propstep","page":"QuantumPropagators","title":"QuantumPropagators.propstep","text":"Perform a single propagation step and return the propagated state.\n\nstate_out = propstep(state, generator, dt, wrk; kwargs...)\n\nThe propagation method is determined by wrk, see initpropwrk.\n\nUnlike propstep!, this method does not act in place, which generally makes it more suitable for automatic differentiation. However, there may be a performance penalty associated with the additional memory allocations.\n\nThe kwargs are forwarded to the underlying method.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.propstep!","page":"QuantumPropagators","title":"QuantumPropagators.propstep!","text":"Perform a single propagation step in-place.\n\npropstep!(state, generator, dt, wrk; kwargs...)\n\nThe propagation method is determined by wrk, see initpropwrk.\n\nGenerally, an in-place propagation will not be suitable for in the context of automatic differentiation.  See propagate for a method that does not act in-place.\n\nThe kwargs are forwarded to the underlying method.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagatorsArnoldiAPI","page":"QuantumPropagators","title":"QuantumPropagators.Arnoldi","text":"","category":"section"},{"location":"api/quantum_propagators/#Private","page":"QuantumPropagators","title":"Private","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.Arnoldi.diagonalize_hessenberg_matrix\nQuantumPropagators.Arnoldi.extend_arnoldi!\nQuantumPropagators.Arnoldi.arnoldi!","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.Arnoldi.diagonalize_hessenberg_matrix","page":"QuantumPropagators","title":"QuantumPropagators.Arnoldi.diagonalize_hessenberg_matrix","text":"diagonalize_hessenberg_matrix(Hess, m; accumulate=false)\n\nDiagonalize the m × m top left submatrix of the given Hessenberg matrix.\n\nIf accumulate is true, return the concatenated eigenvalues for Hess[1:1,1:1] to Hess[1:m,1:m], that is, all sumatrices of size 1 through m.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Arnoldi.extend_arnoldi!","page":"QuantumPropagators","title":"QuantumPropagators.Arnoldi.extend_arnoldi!","text":"Extend dimension of Hessenberg matrix by one.\n\nextend_arnoldi!(Hess, q, m, H, dt; norm_min=1e-15)\n\nextends the entries in Hess from size (m-1)×(m-1) to size m×m, and the list q of Arnoldi vectors from m to (m+1). It is assumed that the input Hess was created by a call to arnoldi! with extended=false or a previous call to extend_arnoldi!. Note that Hess itself is not resized, so it must be allocated to size m×m or greater on input.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Arnoldi.arnoldi!","page":"QuantumPropagators","title":"QuantumPropagators.Arnoldi.arnoldi!","text":"m = arnoldi!(Hess, q, m, Ψ, H, dt=1.0; extended=true, norm_min=1e-15)\n\nCalculate the Hessenberg matrix and Arnoldi vectors of H dt, from Ψ.\n\nFor a given order m, the m×m Hessemberg matrix is calculated and stored in in the pre-allocated Hess. Further  an array of m normalized Arnoldi vectors is stored in in the pre-allocated q, plus one additional unnormalized Arnoldi vector.  The unnormalized m+1st vector could be used to easily extend a given m×m Hessenberg matrix to a (m+1)×(m+1) matrix.\n\nIf the extended Hessenberg matrix is requested (extended=true, default), the m+1st Arnoldi vector is also normalized, and it's norm will be stored in m+1, m entry of the (extended) Hessenberg matrix, which is an (m+1)×(m+1) matrix.\n\nReturn the size m of the calculated Hessenberg matrix. This will usually be the input m, except when the Krylov dimension of H starting from Ψ is less then m. E.g., if Ψ is an eigenstate of H, the returned m will be 1.\n\nSee http://en.wikipedia.org/wiki/Arnoldi_iteration for a description of the algorithm.\n\nArguments\n\nHess::Matrix{ComplexF64}: Pre-allocated storage for the Hessemberg matrix.  Can be uninitialized on input. The matrix must be at least of size m×m, or  (m+1)×(m+1) if extended=true. On output, the m×m sub-matrix of Hess  (with the returned output m) will contain the Hessenberg matrix, and all  other elements of Hess be be set to zero.\nq: Pre-allocated array of states similar to Ψ, as storage for the calculated Arnoldi vectors. These may be un-initialized on input. Must be at least of length m+1\nm: The requested dimensions of the output Hessenberg matrix.\nΨ: The starting vector for the Arnoldi procedure. This can be of any type,  as long as Φ = H * Ψ results in a vector similar to Ψ, there is an inner  products of Φ and Ψ (Ψ⋅Φ is defined), and norm(Ψ) is defined.\nH: The operator (up to dt) for which to calculate the Arnoldi procedure. Can be of any type, as long as H * Ψ is defined.\ndt: The implicit time step; the total operator for which to calculate the Arnoldi procedure is H * dt\nextended: If true (default), calculate the extended Hessenberg matrix, and normalized the final Arnoldi vector\nnorm_min: the minimum value of the norm of Ψ at which Ψ should be  considered the zero vector\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagatorsChebyAPI","page":"QuantumPropagators","title":"QuantumPropagators.Cheby","text":"","category":"section"},{"location":"api/quantum_propagators/#Public-2","page":"QuantumPropagators","title":"Public","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.Cheby.ChebyWrk\nQuantumPropagators.Cheby.cheby\nQuantumPropagators.Cheby.cheby!\nQuantumPropagators.Cheby.cheby_coeffs\nQuantumPropagators.Cheby.cheby_coeffs!","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.Cheby.ChebyWrk","page":"QuantumPropagators","title":"QuantumPropagators.Cheby.ChebyWrk","text":"Workspace for the Chebychev propagation routine.\n\nChebyWrk(Ψ, Δ, E_min, dt; limit=1e-12)\n\ninitializes the workspace for the propagation of a state similar to Ψ under a Hamiltonian with eigenvalues between E_min and E_min + Δ, and a time step dt. Chebychev coefficients smaller than the given limit are discarded.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_propagators/#QuantumPropagators.Cheby.cheby","page":"QuantumPropagators","title":"QuantumPropagators.Cheby.cheby","text":"Evaluate Ψ = exp(i- H dt) Ψ.\n\nΨ_out = cheby(Ψ, H, dt, wrk; E_min=nothing, check_normalization=false)\n\nacts like cheby! but does not modify Ψ in-place.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Cheby.cheby!","page":"QuantumPropagators","title":"QuantumPropagators.Cheby.cheby!","text":"Evaluate Ψ = exp(-i H dt) Ψ in-place.\n\ncheby!(Ψ, H, dt, wrk; E_min=nothing, check_normalization=false)\n\nArguments\n\nΨ: on input, initial vector. Will be overwritten with result.\nH: Hermitian operator\ndt: time step\nwrk: internal workspace\nE_min: minimum eigenvalue of H, to be used instead of the E_min from the  initialization of wrk. The same wrk may be used for different values  E_min, as long as the spectra radius Δ and the time step dt are the  same as those used for the initialization of wrk.\ncheck_normalizataion: perform checks that the H does not exceed the spectral radius for which the the workspace was initialized.\n\nThe routine will not allocate any internal storage. This implementation requires copyto! lmul!, and axpy! to be implemented for Ψ, and the three-argument mul! for Ψ and H.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Cheby.cheby_coeffs","page":"QuantumPropagators","title":"QuantumPropagators.Cheby.cheby_coeffs","text":"Calculate Chebychev coefficients.\n\na::Vector{Float64} = cheby_coeffs(Δ, dt; limit=1e-12)\n\nreturn an array of coefficiencts larger than limit.\n\nArguments\n\nΔ: the spectral radius of the underlying operator\ndt: the time step\n\nSee also cheby_coeffs! for an in-place version.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Cheby.cheby_coeffs!","page":"QuantumPropagators","title":"QuantumPropagators.Cheby.cheby_coeffs!","text":"Calculate Chebychev coefficients in-place.\n\nn::Int = cheby_coeffs!(coeffs, Δ, dt, limit=1e-12)\n\noverwrites the first n values in coeffs with new coefficients larger than limit for the given new spectral radius Δ and time step dt. The coeffs array will be resized if necessary, and may have a length > n on exit.\n\nSee also cheby_coeffs for an non-in-place version.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagatorsExpPropAPI","page":"QuantumPropagators","title":"QuantumPropagators.ExpProp","text":"","category":"section"},{"location":"api/quantum_propagators/#Public-3","page":"QuantumPropagators","title":"Public","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.ExpProp.ExpPropWrk\nQuantumPropagators.ExpProp.expprop!","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.ExpProp.ExpPropWrk","page":"QuantumPropagators","title":"QuantumPropagators.ExpProp.ExpPropWrk","text":"ExpPropWrk(v0)\n\nWorkspace for propagation via direct matrix exponentiation.\n\nInitializes the workspace for the propagation of a vector v0\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_propagators/#QuantumPropagators.ExpProp.expprop!","page":"QuantumPropagators","title":"QuantumPropagators.ExpProp.expprop!","text":"expprop!(Ψ, H, dt, wrk; func=(H_dt -> exp(-1im * H_dt)))\n\nEvaluate Ψ = func(H*dt) Ψ by directly evaluating U = func(H*dt), i.e. by matrix exponentiation for the default func, and then multiplying U and Ψ in-place with mul!.\n\nThe workspace wrk must be initialized with ExpPropWrk to provide storage for a temporary state.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagatorsNewtonAPI","page":"QuantumPropagators","title":"QuantumPropagators.Newton","text":"","category":"section"},{"location":"api/quantum_propagators/#Public-4","page":"QuantumPropagators","title":"Public","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.Newton.NewtonWrk\nQuantumPropagators.Newton.newton!","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.Newton.NewtonWrk","page":"QuantumPropagators","title":"QuantumPropagators.Newton.NewtonWrk","text":"NewtonWrk(v0, m_max=10)\n\nWorkspace for the Newton-with-restarted-Arnoldi propagation routine.\n\nInitializes the workspace for the propagation of a vector v0, using a maximum Krylov dimension of m_max in each restart iteration. Note that m_max should be smaller than the length of v0.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_propagators/#QuantumPropagators.Newton.newton!","page":"QuantumPropagators","title":"QuantumPropagators.Newton.newton!","text":"newton!(Ψ, H, dt, wrk; func=(z -> exp(-1im*z)), norm_min=1e-14, relerr=1e-12,\n        max_restarts=50)\n\nEvaluate Ψ = func(H*dt) Ψ using a Newton-with-restarted-Arnoldi scheme.\n\nArguments\n\nΨ: The state to propagate, will be overwritten in-place with the propagated state\nH: Operator acting on Ψ. Together with dt, this is the argument to func\ndt: Implicit time step. Together with H, this is the argument to func\nwkr: Work array, initialized with NewtonWrk\nfunc: The function to apply to H dt, taking a single (scalar) complex-valued argument z in place of H dt. The default func is to evaluate the time evoluation operator for the Schrödinger equation\nnorm_min: the minium norm at which to consider a state similar to Ψ as zero\nrelerr: The relative error defining the convergence condition for the restart iteration. Propagation stops when the norm of the accumulated Ψ is stable up to the given relative error\nmax_restart: The maximum number of restart iterations. Exceeding max_restart will throw an AssertionError.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#Private-2","page":"QuantumPropagators","title":"Private","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.Newton.extend_newton_coeffs!\nQuantumPropagators.Newton.extend_leja!","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.Newton.extend_newton_coeffs!","page":"QuantumPropagators","title":"QuantumPropagators.Newton.extend_newton_coeffs!","text":"extend_newton_coeffs!(a, n_a, leja, func, n_leja, radius)\n\nExtend the array a of existing Newton coefficients for the expansion of the func from n_a coefficients to n_leja coefficients. Return a new value n_a=n_a+n_leja with the total number of Newton coefficients in the updated a.\n\nArguments\n\na: On input, a zero-based array of length n_a or greater, containing Newton coefficients. On output, array containing a total n_leja coefficients. The array a will be resized if necessary, and may have a length greater than n_leja on output\nn_a:  The number of Newton coefficients in a, on input. Elements of a  beyond the first n_a elements will be overwritten.\nleja: Array of normalized Leja points, containing at least n_leja elements.\nfunc: Function for which to calcluate Newton coeffiecients\nn_leja: The number of elements in leja to use for calculating new coefficients, and the total number of Newton coefficients on output\nradius: Normalization radius for divided differences\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Newton.extend_leja!","page":"QuantumPropagators","title":"QuantumPropagators.Newton.extend_leja!","text":"extend_leja!(leja, n, newpoints, n_use)\n\nGiven an array of n (ordered) Leja points, extract n_use points from newpoints, and append them to the existing Leja points. The array leja should be sufficiently large to hold the new Leja points, which are appended after index n_old. It will be re-allocated if necessary and may have a size of up to 2*(n+n_use).\n\nArguments\n\nleja: Array of leja values. Must contain the \"old\" leja values to be kept  in leja(0:n-1). On output, n_use new leja points will be in  leja(n+:n+n_use-1), for the original value of n.  The leja array must  use zero-based indexing.\nn: On input, number of \"old\" leja points in leja. On output, total number of leja points (i.e. n=n+n_use)\nnewpoints: On input, candidate points for new leja points.  The n_use best values will be chosen and added to leja. On output, the values of new_points are undefined.\nn_use: Number of points that should be added to leja\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagatorsSpectralRangeAPI","page":"QuantumPropagators","title":"QuantumPropagators.SpectralRange","text":"","category":"section"},{"location":"api/quantum_propagators/#Public-5","page":"QuantumPropagators","title":"Public","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.SpectralRange.specrange","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.SpectralRange.specrange","page":"QuantumPropagators","title":"QuantumPropagators.SpectralRange.specrange","text":"Calculate the spectral range of a Hamiltonian H on the real axis.\n\nE_min, E_max = specrange(H; method=:auto, kwargs...)\n\ncalculates the approximate lowest and highest eigenvalues of H. Any imaginary part in the eigenvalues is ignored: the routine is intended for (although not strictly limited to) a Hermitian H.\n\nThis delegates to\n\nspecrange(H, method; kwargs...)\n\nfor the different methods.\n\nThe default method=:auto chooses the best method for the given H. This is :diag for small matrices, and :arnoldi otherwise. Keyword arguments not relevant to the underlying implementation will be ignored.\n\n\n\n\n\nE_min, E_max = specrange(H, :arnoldi; state=random_state(H), m_min=20,\n                         m_max=60, prec=1e-3, nom_min=1e-15, enlarge=true)\n\nuses Arnoldi iteration with state as the starting vector. It approximates the eigenvalues of H with between m_min and m_max Ritz values, until the lowest and highest eigenvalue are stable to a releative precision of prec. The norm_min parameter is passed to the underlying arnoldi!.\n\nIf enlarge=true (default) the returned E_min and E_max will be enlarged via a heuristic to slightly over-estimate the spectral radius instead of under-estimating it.\n\n\n\n\n\nE_min, E_max = specrange(H, :diag)\n\nuses exact diagonization via the standard eigenvals function to obtain the smallest and largest eigenvalue. This should only be used for relatively small matrices.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#Private-3","page":"QuantumPropagators","title":"Private","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.SpectralRange.ritzvals\nQuantumPropagators.SpectralRange.random_state","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.SpectralRange.ritzvals","page":"QuantumPropagators","title":"QuantumPropagators.SpectralRange.ritzvals","text":"Calculate a vector for Ritz values converged to a given precision.\n\nR = ritzvals(G, state, m_min, m_max=2*m_min; prec=1e-5, norm_min=1e-15)\n\ncalculates a complex vector R of at least m_min and at most m_max Ritz values.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.SpectralRange.random_state","page":"QuantumPropagators","title":"QuantumPropagators.SpectralRange.random_state","text":"Random normalized quantum state.\n\n    Ψ = random_state(H)\n\nreturns a random normalized state compatible with the Hamiltonian H. This is intended to provide a starting vector for estimating the spectral radius of H via an Arnoldi method.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagatorsStorageAPI","page":"QuantumPropagators","title":"QuantumPropagators.Storage","text":"","category":"section"},{"location":"api/quantum_propagators/#Public-6","page":"QuantumPropagators","title":"Public","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.Storage.get_from_storage!\nQuantumPropagators.Storage.init_storage\nQuantumPropagators.Storage.map_observable\nQuantumPropagators.Storage.map_observables\nQuantumPropagators.Storage.write_to_storage!","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.Storage.get_from_storage!","page":"QuantumPropagators","title":"QuantumPropagators.Storage.get_from_storage!","text":"Obtain data from storage.\n\nget_from_storage!(state, storage, i)\n\nextracts data from the storage for the i'th time slot. Invese of write_to_storage!\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Storage.init_storage","page":"QuantumPropagators","title":"QuantumPropagators.Storage.init_storage","text":"Create a storage array for propagation.\n\nstorage = init_storage(state, tlist)\n\ncreates a storage array suitable for storing a state for each point in tlist.\n\nstorage = init_storage(state, tlist, observables))\n\ncreates a storage array suitable for the data generated by the observables applied to state, see map_observables, for each point in tlist.\n\nstorage = init_storage(data, nt))\n\ncreates a storage arrays suitable for storing data nt times, where nt=length(tlist). By default, this will be a vector of typeof(data) and length nt, or a n × nt Matrix with the same eltype as data if data is a Vector of length n.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Storage.map_observable","page":"QuantumPropagators","title":"QuantumPropagators.Storage.map_observable","text":"Apply a single observable to state.\n\ndata = map_observable(observable, state)\n\nBy default, observable is assumed to be callable, and the above is equivalent to data = observable(state).\n\nIf observable is a matrix and state is a vector evaluate the expectation value of the observable as dot(state, observable, state).\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Storage.map_observables","page":"QuantumPropagators","title":"QuantumPropagators.Storage.map_observables","text":"Obtain \"observable\" data from state.\n\ndata = map_observables(observables, state)\n\ncalculates the data for a tuple of observables applied to state. For a single observable (tuple of length 1), simply return the result of map_observable.\n\nFor multiple observables, return the tuple resulting from applying map_observable for each observable. If the tuple is \"uniform\" (all elements are of the same type, e.g. if each observable calculates the expectation value of a Hermitian operator), it is converted to a Vector. This allows for compact storage in a storage array, see init_storage.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Storage.write_to_storage!","page":"QuantumPropagators","title":"QuantumPropagators.Storage.write_to_storage!","text":"Place data into storage for time slot i.\n\nwrite_to_storage!(storage, i, state, observables)\n\nFor a storage array created by init_storage, store the data obtains from map_observables into the storage for time slot i. This delegates to the more general\n\nwrite_to_storage!(storage, i, data)\n\nConceptually, this corresponds roughly to storage[i] = data, but storage may have its own idea on how to store data for a specific time slot. For example, with the default init_storage Vector data will be stored in a matrix, and write_to_storage! will in this case write data to the i'th column of the matrix.\n\nFor a given type of storage and data, it is the developer's responsibility that init_storage and write_to_storage! are compatible.\n\n\n\n\n\n","category":"function"},{"location":"manual/#User-Manual","page":"User Manual","title":"User Manual","text":"","category":"section"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"The User Manual describes the API of the QuantumControl package by outlining the general procedure for defining and solving quantum control problems. See the API for a detailed reference.","category":"page"},{"location":"manual/#Setting-up-control-problems","page":"User Manual","title":"Setting up control problems","text":"","category":"section"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"Quantum control problems are described by instantiating ControlProblem. Remember that a quantum control problem aims to find control parameters in the dynamical generators (Hamiltonians, Liouvillians) of a quantum system to steer the dynamics of the system in some desired way. The dynamics of system are probed by one or more quantum states, each with its particular dynamical generator. To determine how well the system dynamics meet the desired behavior, we formulate an \"objective\" for each of those quantum states.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"Most commonly, this is represented by instantiating an Objective which contains the initial state, the generator for that state's dynamics, and a target state. A time grid for the dynamics is part of ControlProblem as tlist. The objective is fulfilled when the control parameters are chosen such that the initial state evolves into the target state.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"A control problem with a single such objective already encodes the common state-to-state problem, e.g. to initialize a system into an entangled state, or to control a chemical reaction. However, there are many control problems that require simultaneously solving more than one objective. For example, finding the control parameters that implement a two-qubit quantum gate O on a quantum computer naturally translates into four simultaneous objectives, one for each two-qubit basis state: 00  O 00, 01  O 01, 10  O 10, 00  O 11. By virtue of the linearity of Hilbert space, finding a simultaneous solution to these four objectives means the any state Ψ will then evolve as Ψ  O Ψ.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"Some optimal control frameworks treat the optimization of quantum gates by numerically evolving the gate itself, U(t=0) = I  O(t=T). This is perfectly compatible with our framework: we can have a single objective for an initial \"state\" U with a target \"state\" O. However, this approach does not scale well numerically when the logical subspace of the two-qubit gate is embedded in a significantly larger physical Hilbert space: U is quadratically larger than Ψ. Moreover, the various methods implemented in the QuantumControl package are inherently parallel with respect to multiple objectives. This is why we emphasize the formulation of the control problem in terms of multiple simultaneous objectives.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"Sometimes, some of the objectives may be more important than others. In this case, instead of the standard Objective, a WeightedObjective is available. There are also situations where the notion of a \"target state\" is not meaningful. Coming back to the example of two-qubit quantum gates, one may wish to maximize the entangling power of the quantum gate, without requiring a specific gate. We extract the information about the entangling power of the dynamical generator by tracking the time evolution of a set of states (the Bell basis, as it happens), but there is no meaningful notion of a \"target state\". In this example, a user may define their own objective as a subtype of QuantumControlBase.AbstractControlObjective and include only an initial state and the dynamical generator for that state, but no target state. Indeed, an initial state and a generator are the minimum components that constitute an objective.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"Mathematically, the control problem is solved by minimizing a functional that is calculated from the time-propagated states in the objectives. By convention, this functional is passed as a keyword argument J_T when instantiating the ControlProblem. Standard functionals are defined in the QuantumControl.Functionals module. Depending on the control method, there can be additional options, either mandatory (like the χ = J_Tϕ required for Krotov's method) or optional, like constraints on the control parameters. See the documentation of the various methods implementing optimize for the options required or supported by the different solvers. All of these options can be passed as keyword arguments when instantiating the ControlProblem[1], or they can be passed later to optimize/@optimize_or_load.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"[1]: The solvers that ship with QuantumControl ignore options they do not know about. So when setting up a ControlProblem it is safe to pass a superset of options for different optimization methods.","category":"page"},{"location":"manual/#Controls-and-control-parameters","page":"User Manual","title":"Controls and control parameters","text":"","category":"section"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"The controls that the QuantumControl package optimizes are implicit in the dynamical generator (Hamiltonians, Liouvillians) of the Objectives in the ControlProblem.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"The getcontrols method extracts the controls from the objectives. Each control is typically time-dependent, e.g. a function ϵ(t) or a vector of pulse values on a time grid. The default format for the dynamical generators is that of a \"nested\" tuple, e.g. (Ĥ₀, (Ĥ₁, ϵ₁), (Ĥ₂, ϵ₂)) where Ĥ₀, Ĥ₁ and Ĥ₂ are (sparse) matrices, and ϵ₁ and ϵ₂ are functions of time. The format corresponds to a time-dependent Hamiltonian H₀ + ϵ₁(t) H₁ + ϵ₂(t) H₂.  For custom types describing a Hamiltonian or Liouvillian, the getcontrols method must be defined to extract the controls.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"For each control, discretize and discretize_on_midpoints discretizes the control to an existing time grid. For controls that are implemented through some custom type, these methods must be defined to enable piecewise-constant time propagation or an optimization that assumes piecewise-constant control (most notably, Krotov's method).","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"More generally, get_control_parameters extracts abstract \"control parameters\" from a control. For controls that are simple functions, this is equivalent to discretizing them to a time grid. That is, the control parameters are the amplitude of the control field at each point in time, respectively each interval of the time grid. In general, though, the control parameters could be more abstract, e.g. the coefficients in a spectral decomposition, or parameters in an analytic pulse shape. In the context of optimal control, the parameters returned by get_control_parameters are those that the optimization should tune, assuming a suitable optimization method such as a gradient-free optimization or a generalized GRAPE (such as GROUP/GOAT).","category":"page"},{"location":"manual/#Time-propagation","page":"User Manual","title":"Time propagation","text":"","category":"section"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"The QuantumControl package uses (and includes) QuantumPropagators.jl as the numerical back-end for simulating the time evolution of all quantum states. The main high-level function provided from that package is propagate, which simulates the dynamics of a quantum state over an entire time grid. It does this by looping over calls to propstep/propstep!, which simulate the dynamics for a single time step.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"In the context of a ControlProblem consisting of one or more Objective, there is also a propagate_objective function that provides a more convenient interface, automatically using the initial state and the dynamical generator from the objective.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"A very typical overall workflow is to set up the control problem, then propagate the objectives with the guess control to see how the system behaves, run the optimization, and then propagate the objectives again with the optimized controls, to verify the success of the optimization. For plugging in the optimized controls, propagate_objective has a controls_map argument.","category":"page"},{"location":"manual/#Optimization","page":"User Manual","title":"Optimization","text":"","category":"section"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"The most direct way to solve a ControlProblem is with the optimize routine. It has a mandatory method argument that then delegates the optimization to the appropriate sub-package implementing that method. However, if the optimization takes more than a few minutes to complete, you should use @optimize_or_load instead of just optimize. This routine runs the optimization and then write the result to file. When called again, it will then simply load the result instead of rerunning the optimization.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"A workflow @optimize_or_load using integrates particularly well with using the DrWatson package to organize your research project[2]. In fact, @optimize_or_load is directly inspired by DrWatson.produce_or_load and uses it under the hood. Just like produce_or_load, @optimize_or_load by default chooses an automatic filename that includes the keyword arguments that define the ControlProblem. That automatic filename is determined by the optimization_savename routine.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"[2]: You are encouraged, but not required to use DrWatson for your projects. Here, we merely borrow some concepts from DrWatson for automatically storing computational results.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"The @optimize_or_load also embeds some metadata in the output file, including (by default) the commit hash of the project repository containing the script that called @optimize_or_load and the filename of the script and line number where the call was made. This functionality is again borrowed from DrWatson.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"The output file written by @optimize_or_load can be read via the load_optimization function. This can recover both the optimization result and the metadata.","category":"page"},{"location":"examples/#examples-list","page":"List of Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Krotov-specific-examples","page":"List of Examples","title":"Krotov-specific examples","text":"","category":"section"},{"location":"examples/","page":"List of Examples","title":"List of Examples","text":"Optimization of a State-to-State Transfer in a Two-Level-System\nOptimization of a Dissipative Quantum Gate\nPulse Parametrization","category":"page"},{"location":"examples/#GRAPE-specific-examples","page":"List of Examples","title":"GRAPE-specific examples","text":"","category":"section"},{"location":"examples/","page":"List of Examples","title":"List of Examples","text":"Optimization of a State-to-State Transfer in a Two-Level-System","category":"page"},{"location":"glossary/#Glossary","page":"Glossary","title":"Glossary","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"In the context of the JuliaQuantumControl ecosystem, we apply the following nomenclature.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Generator","page":"Glossary","title":"Generator","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Dynamical generator (Hamiltonian / Liouvillian) for the time evolution of a state, i.e., the right-hand-side of the equation of motion (up to a factor of i) such that Ψ(t+dt) = e^-i H dt Ψ(t) in the infinitesimal limit. We use the symbols G, H, or L, depending on the context (general, Hamiltonian, Liouvillian).","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Examples for supported forms a Hamiltonian are the following, from the most general case to simplest and most common case of linear controls,","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"<img src=\"../assets/controlhams.svg\" width=\"80%\"/>","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"The H_0 is the Drift Term and each term under the sum over l is a Control Term. In the most general case, Eq. (G1), the control term is a Hamiltonian that depends on a set of control amplitudes. More commonly, the control term is separable into the Control Amplitude a_l(t) and the Control Operator H_l. The control amplitude a_l(t) depends in turn on the Control Function   (or simply \"control\") ϵ_l(t), which is the function we can control directly. The control may further depend on a Pulse Parametrization, ϵ_l(t) = ϵ_l(u_l(t)) or a set of Control Parameters, ϵ_l(t) = ϵ_l(u_n).","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"In an open quantum system, the structure of Eqs. (G1–G3) is the same, but with Liouvillian (super-)operators acting on density matrices instead of Hamiltonians acting on state vectors. See liouvillian with convention=:TDSE.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Drift-Term","page":"Glossary","title":"Drift Term","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"A term in the dynamical generator that does not depend on any controls.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Control-Term","page":"Glossary","title":"Control Term","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"A term in the dynamical generator that depends on one or more controls.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Control-Function","page":"Glossary","title":"Control Function","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"(aka \"Control\") A function ϵ_l(t) in the Generator that is directly controllable, typically corresponding to a physical Control Field. Conceptually a function, but may be specified in terms of Control Parameters.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Control-Field","page":"Glossary","title":"Control Field","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"A function that corresponds directly to some kind of physical drive (laser amplitude, microwave pulse, etc.). The term can be ambiguous in that it usually corresponds to the Control Function ϵ(t), but depending on how the control problem is formulated, it can also correspond to the Control Amplitude a(t).","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Control-Operator","page":"Glossary","title":"Control Operator","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"(aka \"control Hamiltonian/Liouvillian\"). The operator H_l in Eqs. (G2, G3). This is a static operator which forms the Control Term together with a Control Amplitude. The control generator is not a well-defined concept in the most general case of non-separable controls terms, Eq. (G1)","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Control-Amplitude","page":"Glossary","title":"Control Amplitude","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"The time-dependent coefficient for the Control Operator in Eq. (G2), or, in the most general case of Eq. (G1), a function on which the control term depends directly. The mapping from a Control Function to an Control Amplitude can encompass a variety of different concepts:","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Non-linear coupling of a control field to the operator, e.g., the quadratic coupling of the laser field to a Stark shift operator\nTransfer functions, e.g., to model the response of an electronic device to the optimal control field ϵ(t).\nNoise in the amplitude of the control field\nNon-controllable aspects of the control amplitude, e.g. a \"guided\" control amplitude a_l(t) = R(t) + ϵ_l(t) or a non-controllable envelope S(t) in a_l(t) = S(t) ϵ(t) that ensures switch-on- and switch-off in a CRAB pulse ϵ(t).","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"In Qiskit Dynamics, the \"control amplitude\" is called \"Signal\", see Connecting Qiskit Pulse with Qiskit Dynamics, where a Qiskit \"pulse\" corresponds roughly to our Control Function.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Control-Parameters","page":"Glossary","title":"Control Parameters","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Non-time-dependent parameters that a Control Function depends on, ϵ(t) = ϵ(u_n t). One common parametrization of a control field is as a Pulse, where the control parameters are the amplitude of the field at discrete points of a time grid. Parametrization as a \"pulse\" is implicit in Krotov's method and standard GRAPE.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"More generally, the control parameters could also be spectral coefficients (CRAB) or simple parameters for an analytic pulse shape (e.g., position, width, and amplitude of a Gaussian shape). All optimal control methods find optimized control fields by varying the control parameters.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Pulse","page":"Glossary","title":"Pulse","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"(aka \"control pulse\") A control field discretized to a time grid, usually on the midpoints of the time grid, in a piecewise-constant approximation. Stored as a vector of floating point values. The parametrization of a control field as a \"pulse\" is implicit for Krotov's method and standard GRAPE. One might think of these methods to optimize the control fields directly, but a conceptually cleaner understanding is to think of the discretized \"pulse\" as a vector of control parameters for the time-continuous control field.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Pulse-Parametrization","page":"Glossary","title":"Pulse Parametrization","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"The use of a function u(t) such that ϵ(t) = ϵ(u(t)) for the purpose of constraining the amplitude of the control field ϵ(t). See e.g. SquareParametrization, where ϵ(t) = u^2(t) to ensure that ϵ(t) is positive. Since Krotov's method inherently has no constraints on the optimized control fields, pulse parameterization is a method of imposing constraints on the amplitude in this context. This is different from, albeit related to, the Control Amplitude, e.g. a(ϵ(t)) = ϵ^2(t) in that the amplitude parameterization does not reflect how the control field physically couples to the control Hamiltonian. Note that \"parameterization\" here has nothing to do with the \"parametrization\" in terms of Control Parameters: the pulse parametrization is a parametrization with a function, whereas the control parameters are values.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Control-Derivative","page":"Glossary","title":"Control Derivative","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"The derivative of the dynamical Generator with respect to the control ϵ(t). In the case of linear controls terms in Eq. (G3), the control derivative is the Control Operator coupling to ϵ(t). In general, however, for non-linear control terms, the control derivatives still depends on the control fields and is thus time dependent. We commonly use the symbol μ for the control derivative (reminiscent of the dipole operator)","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Parameter-Derivative","page":"Glossary","title":"Parameter Derivative","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"The derivative of a control with respect to a single control parameter. The derivative of the dynamical Generator with respect to that control parameter is then the product of the Control Derivative and the parameter derivative.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Gradient","page":"Glossary","title":"Gradient","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"The derivative of the optimization functional with respect to all Control Parameters, i.e. the vector of all parameter derivatives.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"note: Note\nThe above nomenclature does not consistently extend throughout the quantum control literature: the terms \"control\"/\"control term\"/\"control Hamiltonian\", and \"control\"/\"control field\"/\"control function\"/\"control pulse\"/\"pulse\" are generally somewhat ambiguous. In particular, the distinction between \"control field\" and \"pulse\" (as a parametrization of the control field in terms of amplitudes on a time grid) here is somewhat artifcial and borrowed from the Krotov Python package. However, the terminology defined in this glossary is consistently applied within the JuliaQuantumControl organization, both in the documentation and in the names of members and methods.","category":"page"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"EditURL = \"../../generate_api.jl\"","category":"page"},{"location":"api/quantum_control/#QuantumControlAPI","page":"QuantumControl","title":"QuantumControl","text":"","category":"section"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"QuantumControl re-exports the following members:","category":"page"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"@optimize_or_load\nControlProblem\nObjective\nWeightedObjective\nchain_infohooks\ndefault_optimization_savename_kwargs\ndiscretize\ndiscretize_on_midpoints\nget_control_parameters\nget_from_storage!\nget_tlist_midpoints\ngetcontrols\ninit_storage\ninitpropwrk\nliouvillian\nload_optimization\noptimization_savename\noptimize\npropagate\npropagate_objective\npropstep\npropstep!\nwrite_to_storage!","category":"page"},{"location":"api/quantum_control/#QuantumControlFunctionalsAPI","page":"QuantumControl","title":"QuantumControl.Functionals","text":"","category":"section"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"QuantumControl.Functionals.F_re\nQuantumControl.Functionals.F_sm\nQuantumControl.Functionals.F_ss\nQuantumControl.Functionals.J_T_re\nQuantumControl.Functionals.J_T_sm\nQuantumControl.Functionals.J_T_ss\nQuantumControl.Functionals.chi_re!\nQuantumControl.Functionals.chi_sm!\nQuantumControl.Functionals.chi_ss!\nQuantumControl.Functionals.grad_J_T_sm!","category":"page"},{"location":"api/quantum_control/#QuantumControlShapesAPI","page":"QuantumControl","title":"QuantumControl.Shapes","text":"","category":"section"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"QuantumControl.Shapes.blackman\nQuantumControl.Shapes.box\nQuantumControl.Shapes.flattop","category":"page"},{"location":"#QuantumControl.jl","page":"Home","title":"QuantumControl.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"QuantumControl.jl is a Julia framework for quantum optimal control.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Quantum optimal control attempts to steer a quantum system in some desired way by finding optimal control parameters or control fields inside the system Hamiltonian or Liouvillian. Typical control tasks are the preparation of a specific quantum state or the realization of a logical gate in a quantum computer (\"pulse level control\"). Thus, quantum control theory is a critical part of realizing quantum technologies at the lowest level. Numerical methods of open-loop quantum control (methods that do not involve measurement feedback from a physical quantum device) such as Krotov's method and GRAPE address the control problem by simulating the dynamics of the system and then iteratively improving the value of a functional that encodes the desired outcome.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The QuantumControl.jl package collects the packages in the JuliaQuantumControl organization and provides a single coherent API for solving the quantum control problem.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See the installation instructions on Github.\nLook at a simple example for a state-to-state transition with Krotov's method to get a feeling for how the QuantumControl package is intended to be used, or look at the larger list of Examples.\nRead the Glossary and User Manual to understand the philosophy of the framework.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"glossary.md\",\n    \"manual.md\",\n    \"howto.md\",\n]\nDepth = 2","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"examples/index.md\",\n]","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"api/quantum_control.md\",\n]\nDepth = 1","category":"page"},{"location":"#Sub-Packages","page":"Home","title":"Sub-Packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"api/quantum_propagators.md\",\n    \"api/quantum_control_base.md\",\n    \"api/krotov.md\",\n    \"api/grape.md\",\n]\nDepth = 1","category":"page"},{"location":"#History","page":"Home","title":"History","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"history.md\",\n]\nDepth = 1","category":"page"}]
}
