var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"","category":"page"},{"location":"api/quantum_control_base/","page":"QuantumControlBase","title":"QuantumControlBase","text":"EditURL = \"../../generate_api.jl\"","category":"page"},{"location":"api/quantum_control_base/#QuantumControlBasePackage","page":"QuantumControlBase","title":"QuantumControlBase Package","text":"","category":"section"},{"location":"api/quantum_control_base/#Package-Index","page":"QuantumControlBase","title":"Package Index","text":"","category":"section"},{"location":"api/quantum_control_base/","page":"QuantumControlBase","title":"QuantumControlBase","text":"gdeftgttexttgt gdeftroperatornametr gdefReoperatornameRe gdefImoperatornameIm","category":"page"},{"location":"api/quantum_control_base/","page":"QuantumControlBase","title":"QuantumControlBase","text":"Pages   = [\"quantum_control_base.md\"]","category":"page"},{"location":"api/quantum_control_base/#QuantumControlBaseAPI","page":"QuantumControlBase","title":"QuantumControlBase","text":"","category":"section"},{"location":"api/quantum_control_base/","page":"QuantumControlBase","title":"QuantumControlBase","text":"Public Members:","category":"page"},{"location":"api/quantum_control_base/","page":"QuantumControlBase","title":"QuantumControlBase","text":"ControlProblem\nObjective\noptimize\npropagate_objective\npropagate_objectives","category":"page"},{"location":"api/quantum_control_base/","page":"QuantumControlBase","title":"QuantumControlBase","text":"Private Members:","category":"page"},{"location":"api/quantum_control_base/","page":"QuantumControlBase","title":"QuantumControlBase","text":"set_atexit_save_optimization\nchain_infohooks\nget_control_derivs\nget_control_deriv\n@threadsif\nmake_chi\nmake_grad_J_a","category":"page"},{"location":"api/quantum_control_base/#Reference","page":"QuantumControlBase","title":"Reference","text":"","category":"section"},{"location":"api/quantum_control_base/","page":"QuantumControlBase","title":"QuantumControlBase","text":"QuantumControlBase.ControlProblem\nQuantumControlBase.Objective\nQuantumControlBase.optimize\nQuantumControlBase.propagate_objective\nQuantumControlBase.propagate_objectives\nQuantumControlBase.set_atexit_save_optimization\nQuantumControlBase.chain_infohooks\nQuantumControlBase.get_control_derivs\nQuantumControlBase.get_control_deriv\nQuantumControlBase.@threadsif\nQuantumControlBase.make_chi\nQuantumControlBase.make_grad_J_a","category":"page"},{"location":"api/quantum_control_base/#QuantumControlBase.ControlProblem","page":"QuantumControlBase","title":"QuantumControlBase.ControlProblem","text":"A full control problem with multiple objectives.\n\nControlProblem(;\n   objectives,\n   tlist,\n   kwargs...\n)\n\nNote that the control problem can only be instantiated via keyword arguments.\n\nThe objectives are a list of Objective instances, each defining an initial state and a dynamical generator for the evolution of that state. Usually, the objective will also include a target state (see Objective) and possibly a weight.\n\nThe tlist is the time grid on which the time evolution of the initial states of each objective should be propagated.\n\nThe remaining kwargs are keyword arguments that are passed directly to the optimal control method. These typically include e.g. the optimization functional.\n\nThe control problem is solved by finding a set of controls that simultaneously fulfill all objectives.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_control_base/#QuantumControlBase.Objective","page":"QuantumControlBase","title":"QuantumControlBase.Objective","text":"Optimization objective.\n\nObjective(;\n    initial_state,\n    generator,\n    target_state=nothing,\n    weight=1.0,\n    kwargs...\n)\n\ndescribes an optimization objective that is tracked by the time evolution of the given initial_state under the given generator, e.g., a time-dependent Hamiltonian or Liouvillian. Each objective represents a single propagated state on which an optimization functional may depend.\n\nThe most common control problems in quantum control (state-to-state, gate optimization) require that the initial_state evolves into a target_state, which should be given as a keyword argument.\n\nAn optimization functional usually depends on multiple forward-propagated states (i.e., multiple objectives). Sometimes, it is useful to weight the contributions of different objectives relative to each other, see, e.g., Goerz et al., New J. Phys. 16, 055012 (2014). To this end, a weight can be attached to each Objective as an optional keyword argument.\n\nAny other keyword arguments are available to a custom functional as properties of the Objective .\n\nNote that the Objective can only be instantiated via keyword arguments, with initial_state and generator being the only two mandatory keyword arguments.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_control_base/#QuantumControlBase.optimize","page":"QuantumControlBase","title":"QuantumControlBase.optimize","text":"Optimize a quantum control problem.\n\nresult = optimize(problem; method=<method>, kwargs...)\n\noptimizes towards a solution of given problem with the given optimization method. Any keyword argument temporarily overrides the corresponding keyword argument in problem.\n\n\n\n\n\nresult = optimize(problem; method=:krotov, kwargs...)\n\noptimizes the given control problem using Krotov's method, returning a KrotovResult.\n\nKeyword arguments that control the optimization are taken from the keyword arguments used in the instantiation of problem.\n\nRequired problem keyword arguments\n\nJ_T: A function J_T(ϕ, objectives) that evaluates the final time functional from a list ϕ of forward-propagated states and problem.objectives.\n\nRecommended problem keyword arguments\n\nlambda_a=1.0: The inverse Krotov step width λ_a for every pulse.\nupdate_shape=(t->1.0): A function S(t) for the \"update shape\" that scales the update for every pulse\n\nIf different controls require different lambda_a or update_shape, a dict pulse_options must be given instead of a global lambda_a and update_shape, see below.\n\nOptional problem keyword arguments\n\nThe following keyword arguments are supported (with default values):\n\npulse_options: A dictionary that maps every control (as obtained by get_controls from the problem.objectives) to the following dict:\n:lambda_a:  The value for inverse Krotov step width λₐ\n:update_shape: A function S(t) for the \"update shape\" that scales the Krotov pulse update.\nThis overrides the global lambda_a and update_shape arguments.\nchi: A function chi!(χ, ϕ, objectives) what receives a list ϕ of the forward propagated states and must set χₖ = -J_Tϕₖ. If not given, it will be automatically determined from J_T via make_chi with the default parameters.\nsigma=nothing: Function that calculate the second-order contribution. If not given, the first-order Krotov method is used.\niter_start=0: the initial iteration number\niter_stop=5000: the maximum iteration number\nprop_method/fw_prop_method/bw_prop_method: The propagation method to use for each objective, see below.\nupdate_hook: A function that receives the Krotov workspace, the iteration number, the list of updated pulses and the list of guess pulses as positional arguments. The function may mutate any of its arguments. This may be used e.g. to apply a spectral filter to the updated pulses, or to update propagation workspaces inside the Krotov workspace.\ninfo_hook: A function (or tuple of functions) that receives the same argumens as update_hook, in order to write information about the current iteration to the screen or to a file. The default info_hook prints a table with convergence information to the screen. Runs after update_hook. The info_hook function may return a tuple, which is stored in the list of records inside the KrotovResult object.\ncheck_convergence: a function to check whether convergence has been reached. Receives a KrotovResult object result, and should set result.converged to true and result.message to an appropriate string in case of convergence. Multiple convergence checks can be performed by chaining functions with ∘. The convergence check is performed after any calls to update_hook and info_hook.\nverbose=false: If true, print information during initialization\n\nThe propagation method for the forward propagation of each objective is determined by the first available item of the following:\n\na fw_prop_method keyword argument\na prop_method keyword argument\na property fw_prop_method of the objective\na property prop_method of the objective\nthe value :auto\n\nThe propagation method for the backword propagation is determined similarly, but with bw_prop_method instead of fw_prop_method.\n\n\n\n\n\nresult = optimize(problem; method=:GRAPE, kwargs...)\n\noptimizes the given control problem via the GRAPE method, by minimizing the functional\n\nJ(ϵ_ln) = J_T(ϕ_k(T)) + λ_a J_a(ϵ_ln)\n\nwhere the final time functional J_T depends explicitly on the forward-propagated states and the running cost J_a depends explicitly on pulse values ϵ_nl of the l'th control discretized on the n'th interval of the time grid.\n\nReturns a GrapeResult.\n\nKeyword arguments that control the optimization are taken from the keyword arguments used in the instantiation of problem.\n\nRequired problem keyword arguments\n\nJ_T: A function J_T(ϕ, objectives; τ=τ) that evaluates the final time functional from a vector ϕ of forward-propagated states and problem.objectives. For all objectives that define a target_state, the element τₖ of the vector τ will contain the overlap of the state ϕₖ with the target_state of the k'th objective, or NaN otherwise.\n\nOptional problem keyword arguments\n\nchi: A function chi!(χ, ϕ, objectives) what receives a list ϕ of the forward propagated states and must set χₖ = -J_Tϕₖ. If not given, it will be automatically determined from J_T via make_chi with the default parameters.\nJ_a: A function J_a(pulsevals, tlist) that evaluates running costs over the pulse values, where pulsevals are the vectorized values ϵ_nl. If not given, the optimization will not include a running cost.\ngradient_method=:gradgen: One of :gradgen (default) or :taylor. With gradient_method=:gradgen, the gradient is calculated using QuantumGradientGenerators. With gradient_method=:taylor, it is evaluated via a Taylor series, see Eq. (20) in Kuprov and Rogers,  J. Chem. Phys. 131, 234108 (2009) [17].\ntaylor_grad_max_order=100: If given with gradient_method=:taylor, the maximum number of terms in the Taylor series. If taylor_grad_check_convergence=true (default), if the Taylor series does not convergence within the given number of terms, throw an an error. With taylor_grad_check_convergence=true, this is the exact order of the Taylor series.\ntaylor_grad_tolerance=1e-16: If given with gradient_method=:taylor and taylor_grad_check_convergence=true, stop the Taylor series when the norm of the term falls below the given tolerance. Ignored if taylor_grad_check_convergence=false.\ntaylor_grad_check_convergence=true: If given as true (default), check the convergence after each term in the Taylor series an stop as soon as the norm of the term drops below the given number. If false, stop after exactly taylor_grad_max_order terms.\nlambda_a=1: A weight for the running cost J_a.\ngrad_J_a: A function to calculate the gradient of J_a. If not given, it will be automatically determined.\nupper_bound: An upper bound for the value of any optimized control. Time-dependent upper bounds can be specified via pulse_options.\nlower_bound: A lower bound for the value of any optimized control. Time-dependent lower bounds can be specified via pulse_options.\npulse_options: A dictionary that maps every control (as obtained by get_controls from the problem.objectives) to a dict with the following possible keys:\n:upper_bounds: A vector of upper bound values, one for each intervals of the time grid. Values of Inf indicate an unconstrained upper bound for that time interval, respectively the global upper_bound, if given.\n:lower_bounds: A vector of lower bound values. Values of -Inf indicate an unconstrained lower bound for that time interval,\nupdate_hook: Not implemented\ninfo_hook: A function (or tuple of functions) that receives the same arguments as update_hook, in order to write information about the current iteration to the screen or to a file. The default info_hook prints a table with convergence information to the screen. Runs after update_hook. The info_hook function may return a tuple, which is stored in the list of records inside the GrapeResult object.\ncheck_convergence: A function to check whether convergence has been reached. Receives a GrapeResult object result, and should set result.converged to true and result.message to an appropriate string in case of convergence. Multiple convergence checks can be performed by chaining functions with ∘. The convergence check is performed after any calls to update_hook and info_hook.\nx_tol: Parameter for Optim.jl\nf_tol: Parameter for Optim.jl\ng_tol: Parameter for Optim.jl\nshow_trace: Parameter for Optim.jl\nextended_trace:  Parameter for Optim.jl\nshow_every: Parameter for Optim.jl\nallow_f_increases: Parameter for Optim.jl\noptimizer: An optional Optim.jl optimizer (Optim.AbstractOptimizer instance). If not given, an L-BFGS-B optimizer will be used.\nprop_method/fw_prop_method/bw_prop_method: The propagation method to use for each objective, see below.\nprop_method/fw_prop_method/grad_prop_method: The propagation method to use for the extended gradient vector for each objective, see below.\nverbose=false: If true, print information during initialization\n\nThe propagation method for the forward propagation of each objective is determined by the first available item of the following:\n\na fw_prop_method keyword argument\na prop_method keyword argument\na property fw_prop_method of the objective\na property prop_method of the objective\nthe value :auto\n\nThe propagation method for the backward propagation is determined similarly, but with bw_prop_method instead of fw_prop_method. The propagation method for the backward propagation of the extended gradient vector for each objective is determined from grad_prop_method, fw_prop_method, prop_method in order of precedence.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.propagate_objective","page":"QuantumControlBase","title":"QuantumControlBase.propagate_objective","text":"Propagate with the dynamical generator of a control objective.\n\npropagate_objective(obj, tlist; method=:auto, initial_state=obj.initial_state,\n                    kwargs...)\n\npropagates initial_state under the dynamics described by obj.generator.\n\nThe optional dict control_map may be given to replace the controls in obj.generator (as obtained by get_controls) with custom functions or vectors, e.g. with the controls resulting from optimization, see also substitute.\n\nIf obj has a property/field prop_method or fw_prop_method, its value will be used as the default for method instead of :auto. An explicit keyword argument for method always overrides the default.\n\nAll other kwargs are forwarded to the underlying QuantumPropagators.propagate method for obj.initial_state.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.propagate_objectives","page":"QuantumControlBase","title":"QuantumControlBase.propagate_objectives","text":"Propagate multiple objectives in parallel.\n\nresult = propagate_objectives(objectives, tlist; use_threads=true, kwargs...)\n\nruns propagate_objective for every objective in objectives, collects and returns a vector of results. The propagation happens in parallel if use_threads=true (default). All keyword parameters are passed to propagate_objective, except that if initial_state is given, it must be a vector of initial states, one for each objective. Likewise, to pass pre-allocated storage arrays to storage, a vector of storage arrays must be passed. A simple storage=true will still work to return a vector of storage results.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.set_atexit_save_optimization","page":"QuantumControlBase","title":"QuantumControlBase.set_atexit_save_optimization","text":"Register a callback to dump a running optimization to disk on unexpected exit.\n\nA long-running optimization routine may use\n\nif !isnothing(atexit_filename)\n    set_atexit_save_optimization(\n        atexit_filename, result; msg_property=:messsage, msg=\"Abort: ATEXIT\"\n    )\n    # ...\n    popfirst!(Base.atexit_hooks)  # remove callback\nend\n\nto register a callback that writes the given result object to the given filename in JLD2 format in the event that the program terminates unexpectedly. The idea is to avoid data loss if the user presses CTRL-C in a non-interactive program (SIGINT), or if the process receives a SIGTERM from an HPC scheduler because the process has reached its allocated runtime limit. Note that the callback cannot protect against data loss in all possible scenarios, e.g., a SIGKILL will terminate the program without giving the callback a chance to run (as will yanking the power cord).\n\nAs in the above example, the optimization routine should make set_atexit_save_optimization conditional on an atexit_filename keyword argument, which is what QuantumControl.@optimize_or_load will pass to the optimization routine. The optimization routine must remove the callback from Base.atexit_hooks when it exits normally. Note that in an interactive context, CTRL-C will throw an InterruptException, but not cause a shutdown. Optimization routines that want to prevent data loss in this situation should handle the InterruptException and return result, in addition to using set_atexit_save_optimization.\n\nIf msg_property is not nothing, the given msg string will be stored in the corresponding property of the (mutable) result object before it is written out.\n\nThe resulting JLD2 file is compatible with QuantumControl.load_optimization.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.chain_infohooks","page":"QuantumControlBase","title":"QuantumControlBase.chain_infohooks","text":"Combine multiple info_hook functions.\n\nchain_infohooks(funcs...)\n\ncombines funcs into a single Function that can be passes as info_hook to ControlProblem or any optimize-function.\n\nEach function in func must be a suitable info_hook by itself. This means that it should receive the optimization workspace object as its first positional parameter, then positional parameters specific to the optimization method, and then an arbitrary number of data parameters. It must return either nothing or a tuple of \"info\" objects (which will end up in the records field of the optimization result).\n\nWhen chaining infohooks, the funcs will be called in series, and the \"info\" objects will be accumulated into a single result tuple. The combined results from previous funcs will be given to the subsequent funcs as data parameters. This allows for the infohooks in the chain to communicate.\n\nThe chain will return the final combined result tuple, or nothing if all funcs return nothing.\n\nnote: Note\nWhen instantiating a ControlProblem, any info_hook that is a tuple will be automatically processed with chain_infohooks. Thus, chain_infohooks rarely has to be invoked manually.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.get_control_derivs","page":"QuantumControlBase","title":"QuantumControlBase.get_control_derivs","text":"Get a vector of the derivatives of generator w.r.t. each control.\n\nget_control_derivs(generator, controls)\n\nreturn as vector containing the derivative of generator with respect to each control in controls. The elements of the vector are either nothing if generator does not depend on that particular control, or a function μ(α) that evaluates the derivative for a particular value of the control, see get_control_deriv.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.get_control_deriv","page":"QuantumControlBase","title":"QuantumControlBase.get_control_deriv","text":"Get the derivative of the generator G w.r.t. the control ϵ(t).\n\nμ  = get_control_deriv(generator, control)\n\nreturns nothing if the generator (Hamiltonian or Liouvillian) does not depend on control, or generator\n\nμ = fracGϵ(t)\n\notherwise. For linear control terms, μ will be a static operator, e.g. an AbstractMatrix or an Operator. For non-linear controls, μ will be time-dependent, e.g. a Generator. In either case, evaluate should be used to evaluate μ into a constant operator for particular values of the controls and a particular point in time.\n\nFor constant generators, e.g. an Operator, the result is always nothing.\n\n\n\n\n\na = get_control_deriv(ampl, control)\n\nreturns the derivative a_l(t)ϵ_l(t) of the given amplitude a_l(ϵ_l(t) t) with respect to the given control ϵ_l(t). For \"trivial\" amplitudes, where a_l(t)  ϵ_l(t), the result with be either 1.0 or 0.0 (depending on whether ampl ≡ control). For non-trivial amplitudes, the result may be another amplitude that depends on the controls and potentially on time, but can be evaluated to a constant with evaluate.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.@threadsif","page":"QuantumControlBase","title":"QuantumControlBase.@threadsif","text":"Conditionally apply multi-threading to for loops.\n\nThis is a variation on Base.Threads.@threads that adds a run-time boolean flag to enable or disable threading. It is intended for internal use in packages building on QuantumControlBase.\n\nUsage:\n\nusing QuantumControlBase: @threadsif\n\nfunction optimize(objectives; use_threads=true)\n    @threadsif use_threads for k = 1:length(objectives)\n    # ...\n    end\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/quantum_control_base/#QuantumControlBase.make_chi","page":"QuantumControlBase","title":"QuantumControlBase.make_chi","text":"Return a function that evaluates χ_k = -J_Tϕ_k.\n\nchi! = make_chi(\n    J_T,\n    objectives;\n    force_zygote=false,\n    via=(any(isnothing(obj.target_state) for obj in objectives) ? :phi : :tau),\n    use_finite_differences=false\n)\n\ncreates a function chi!(χ, ϕ, objectives; τ) that sets the k'th element of χ to χ_k = -J_Tϕ_k, where ϕ_k is the k'th element of ϕ. These are the states used as the boundary condition for the backward propagation propagation in Krotov's method and GRAPE. Each χₖ is defined as a matrix calculus Wirtinger derivative,\n\nχ_k(T) = -fracJ_Tϕ_k = -frac12 _ϕ_k J_Tqquad\n_ϕ_k J_T  fracJ_TReϕ_k + i fracJ_TImϕ_k\n\nThe function J_T must take a vector of states ϕ and a vector of objectives as positional parameters, and a vector τ as a keyword argument, see e.g. J_T_sm). If all objectives define a target_state, then τ will be the overlap of the states ϕ with those target states. The functional J_T may or may not use those overlaps.  Likewise, the resulting chi! may or may not use the keyword parameter τ.\n\nFor functionals where -J_Tϕ_k is known analytically, that analytic derivative will be returned, e.g.,\n\nJ_T_sm → chi_sm!,\nJ_T_re → chi_re!,\nJ_T_ss → chi_ss!.\n\nOtherwise, or if force_zygote=true or use_finite_differences=true, the derivative to calculate χ_k will be evaluated automatically, via automatic differentiation with Zygote, or via finite differences (which primarily serves for testing the Zygote gradient).\n\nWhen evaluating χ_k automatically, if via=:phi is given , χ_k(T) is calculated directly as defined a above from the gradient with respect to the states ϕ_k(T). The resulting function chi! ignores any passed τ keyword argument.\n\nIf via=:tau is given instead, the functional J_T is considered a function of overlaps τ_k = ϕ_k^tgtϕ_k(T). This requires that all objectives define a target_state and that J_T calculates the value of the functional solely based on the values of τ passed as a keyword argument.  With only the complex conjugate τ_k = ϕ_k(T)ϕ_k^tgt having an explicit dependency on ϕ_k(T),  the chain rule in this case is\n\nχ_k(T)\n= -fracJ_Tϕ_k\n= -left(\n    fracJ_Tτ_k\n    fracτ_kϕ_k\n  right)\n= - frac12 (_τ_k J_T) ϕ_k^tgt\n\nAgain, we have used the definition of the Wirtinger derivatives,\n\nbeginalign*\n    fracJ_Tτ_k\n     frac12left(\n        frac J_T Reτ_k\n        - i frac J_T Imτ_k\n    right)\n    fracJ_Tτ_k\n     frac12left(\n        frac J_T Reτ_k\n        + i frac J_T Imτ_k\n    right)\nendalign*\n\nand the definition of the Zygote gradient with respect to a complex scalar,\n\n_τ_k J_T = left(\n    frac J_T Reτ_k\n    + i frac J_T Imτ_k\nright)\n\ntip: Tip\nIn order to extend make_chi with an analytic implementation for a new J_T function, define a new method make_analytic_chi like so:make_analytic_chi(::typeof(J_T_sm), objectives) = chi_sm!which links make_chi for J_T_sm to chi_sm!.\n\nwarning: Warning\nZygote is notorious for being buggy (silently returning incorrect gradients). Always test automatic derivatives against finite differences and/or other automatic differentiation frameworks.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_base/#QuantumControlBase.make_grad_J_a","page":"QuantumControlBase","title":"QuantumControlBase.make_grad_J_a","text":"Return a function to evaluate J_aϵ_ln for a pulse value running cost.\n\ngrad_J_a! = make_grad_J_a(\n    J_a,\n    tlist;\n    force_zygote=false,\n    use_finite_differences=false\n)\n\nreturns a function so that grad_J_a!(∇J_a, pulsevals, tlist) sets J_aϵ_ln as the elements of the (vectorized) ∇J_a. The function J_a must have the interface J_a(pulsevals, tlist), see, e.g., J_a_fluence.\n\nIf force_zygote=true, automatic differentiation with Zygote will be used to calculate the derivative.\n\nIf use_finite_differences=true, the derivative will be calculated via finite differences. This may be used to verify Zygote gradients.\n\nBy default, for functionals J_a that have a known analytic derivative, that analytic derivative will be used. For unknown functions, the derivative will be calculated via Zygote.\n\ntip: Tip\nIn order to extend make_grad_J_a with an analytic implementation for a new J_a function, define a new method make_analytic_grad_J_a like so:make_analytic_grad_J_a(::typeof(J_a_fluence), tlist) = grad_J_a_fluence!which links make_grad_J_a for J_a_fluence to grad_J_a_fluence!.\n\n\n\n\n\n","category":"function"},{"location":"api/grape/","page":"GRAPE","title":"GRAPE","text":"EditURL = \"../../generate_api.jl\"","category":"page"},{"location":"api/grape/#GRAPEPackage","page":"GRAPE","title":"GRAPE Package","text":"","category":"section"},{"location":"api/grape/#Package-Index","page":"GRAPE","title":"Package Index","text":"","category":"section"},{"location":"api/grape/","page":"GRAPE","title":"GRAPE","text":"gdeftgttexttgt gdeftroperatornametr gdefReoperatornameRe gdefImoperatornameIm","category":"page"},{"location":"api/grape/","page":"GRAPE","title":"GRAPE","text":"Pages   = [\"grape.md\"]","category":"page"},{"location":"api/grape/#GRAPEAPI","page":"GRAPE","title":"GRAPE","text":"","category":"section"},{"location":"api/grape/","page":"GRAPE","title":"GRAPE","text":"Private Members:","category":"page"},{"location":"api/grape/","page":"GRAPE","title":"GRAPE","text":"optimize_grape\nprint_table\nGrapeResult","category":"page"},{"location":"api/grape/#Reference","page":"GRAPE","title":"Reference","text":"","category":"section"},{"location":"api/grape/","page":"GRAPE","title":"GRAPE","text":"GRAPE.optimize_grape\nGRAPE.print_table\nGRAPE.GrapeResult","category":"page"},{"location":"api/grape/#GRAPE.optimize_grape","page":"GRAPE","title":"GRAPE.optimize_grape","text":"See optimize(problem; method=:GRAPE, kwargs...).\n\n\n\n\n\n","category":"function"},{"location":"api/grape/#GRAPE.print_table","page":"GRAPE","title":"GRAPE.print_table","text":"Print optimization progress as a table.\n\nThis functions serves as the default info_hook for an optimization with GRAPE.\n\n\n\n\n\n","category":"function"},{"location":"api/grape/#GRAPE.GrapeResult","page":"GRAPE","title":"GRAPE.GrapeResult","text":"Result object returned by optimize_grape.\n\n\n\n\n\n","category":"type"},{"location":"api/krotov/","page":"Krotov","title":"Krotov","text":"EditURL = \"../../generate_api.jl\"","category":"page"},{"location":"api/krotov/#KrotovPackage","page":"Krotov","title":"Krotov Package","text":"","category":"section"},{"location":"api/krotov/#Package-Index","page":"Krotov","title":"Package Index","text":"","category":"section"},{"location":"api/krotov/","page":"Krotov","title":"Krotov","text":"gdeftgttexttgt gdeftroperatornametr gdefReoperatornameRe gdefImoperatornameIm","category":"page"},{"location":"api/krotov/","page":"Krotov","title":"Krotov","text":"Pages   = [\"krotov.md\"]","category":"page"},{"location":"api/krotov/#KrotovAPI","page":"Krotov","title":"Krotov","text":"","category":"section"},{"location":"api/krotov/","page":"Krotov","title":"Krotov","text":"Private Members:","category":"page"},{"location":"api/krotov/","page":"Krotov","title":"Krotov","text":"print_table\noptimize_krotov\nKrotovResult","category":"page"},{"location":"api/krotov/#Reference","page":"Krotov","title":"Reference","text":"","category":"section"},{"location":"api/krotov/","page":"Krotov","title":"Krotov","text":"Krotov.print_table\nKrotov.optimize_krotov\nKrotov.KrotovResult","category":"page"},{"location":"api/krotov/#Krotov.print_table","page":"Krotov","title":"Krotov.print_table","text":"Print optimization progress as a table.\n\nThis functions serves as the default info_hook for an optimization with Krotov's method.\n\n\n\n\n\n","category":"function"},{"location":"api/krotov/#Krotov.optimize_krotov","page":"Krotov","title":"Krotov.optimize_krotov","text":"See optimize(problem; method=:krotov, kwargs...).\n\n\n\n\n\n","category":"function"},{"location":"api/krotov/#Krotov.KrotovResult","page":"Krotov","title":"Krotov.KrotovResult","text":"Result object returned by optimize_krotov.\n\n\n\n\n\n","category":"type"},{"location":"howto/#Howto","page":"Howto","title":"Howto","text":"","category":"section"},{"location":"howto/","page":"Howto","title":"Howto","text":"TODO","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"EditURL = \"../../generate_api.jl\"","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagatorsPackage","page":"QuantumPropagators","title":"QuantumPropagators Package","text":"","category":"section"},{"location":"api/quantum_propagators/#Package-Index","page":"QuantumPropagators","title":"Package Index","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"gdeftgttexttgt gdeftroperatornametr gdefReoperatornameRe gdefImoperatornameIm","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Pages   = [\"quantum_propagators.md\"]","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagatorsAPI","page":"QuantumPropagators","title":"QuantumPropagators","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Public Members:","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"init_prop\nprop_step!\npropagate\nreinit_prop!","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Private Members:","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"AbstractPropagator\nset_t!\nPiecewisePropagator\nchoose_propmethod\ncheby_get_spectral_envelope\nset_state!\nNewtonPropagator\nExpPropagator\nPWCPropagator\nChebyPropagator","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Submodules:","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.Amplitudes\nQuantumPropagators.Arnoldi\nQuantumPropagators.Cheby\nQuantumPropagators.Controls\nQuantumPropagators.ExpProp\nQuantumPropagators.Generators\nQuantumPropagators.Newton\nQuantumPropagators.Shapes\nQuantumPropagators.SpectralRange\nQuantumPropagators.Storage","category":"page"},{"location":"api/quantum_propagators/#Reference","page":"QuantumPropagators","title":"Reference","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.init_prop\nQuantumPropagators.prop_step!\nQuantumPropagators.propagate\nQuantumPropagators.reinit_prop!\nQuantumPropagators.AbstractPropagator\nQuantumPropagators.set_t!\nQuantumPropagators.PiecewisePropagator\nQuantumPropagators.choose_propmethod\nQuantumPropagators.cheby_get_spectral_envelope\nQuantumPropagators.set_state!\nQuantumPropagators.NewtonPropagator\nQuantumPropagators.ExpPropagator\nQuantumPropagators.PWCPropagator\nQuantumPropagators.ChebyPropagator","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.init_prop","page":"QuantumPropagators","title":"QuantumPropagators.init_prop","text":"Initialize a Propagator.\n\npropagator = init_prop(\n    state, generator, tlist;\n    method=:auto,\n    backward=false,\n    inplace=true,\n    piecewise=nothing,\n    pwc=nothing,\n    kwargs...\n)\n\ninitializes a propagator for the time propagation of the given state over a time grid tlist under the time-dependent generator (Hamiltonian/Liouvillian) generator.\n\nArguments\n\nstate: The \"initial\" state for the propagation. For backward=false, this state is taken to be at initial time (tlist[begin]); and for backward=true, at the final time (tlist[end])\ngenerator: The time-dependent generator of the dynamics\ntlist: The time grid over which which the propagation is defined. This may or may not be equidistant.\n\nKeyword arguments\n\nmethod: The propagation method to use. The default value of :auto attempts to choose the best method available, based on the properties of the given state, tlist, and generator, cf. choose_propmethod\nbackward: If true, initialize the propagator for a backward propagation. The resulting propagator.t will be tlist[end], and subsequent calls to prop_step! will move backward on tlist.\ninplace: If true, the state property of the resulting propagator will be changed in-place by any call to prop_step!. If false, each call to prop_step! changes the reference for propgator.state, and the progation will not use any in-place operations. Not all propagation methods may support both in-place and not-in-place propagation. In-place propagation is generally more efficient but may not be compatible, e.g., with automatic differentiation.\npiecewise: If given a a boolean, true enforces that the resulting propagator is a PiecewisePropagator, and false enforces is not to be a PiecewisePropagator\npwc: Like piecewise, for for the stronger PWCPropagator\n\nAll other kwargs are method-dependent and are ignored for methods that do not support them.\n\nThe type of the returned propagator is a sub-type of AbstractPropagator, respectively a sub-type of PiecewisePropagator if piecewise=true or a sub-type of PWCPropagator if pwc=true.\n\nSee also\n\nreinit_prop! — Re-initialize a propagator\npropagate — Higher-level propagation interface\n\n\n\n\n\ncheby_propagator = init_prop(\n    state,\n    generator,\n    tlist;\n    method=:cheby,\n    inplace=true,\n    backward=false,\n    verbose=false,\n    parameters=nothing,\n    control_ranges=nothing,\n    specrange_method=:auto,\n    specrange_buffer=0.01,\n    cheby_coeffs_limit=1e-12,\n    check_normalization=false,\n    specrange_kwargs...\n)\n\ninitializes a ChebyPropagator.\n\nMethod-specific keyword arguments\n\ncontrol_ranges: a dict the maps the controls in generator (see get_controls) to a tuple of min/max values. The Chebychev coefficients will be calculated based on a spectral envelope that assumes that each control can take arbitrary values within the min/max range. If not given, the ranges are determined automatically. Specifying manual control ranges can be useful when the the control amplitudes (parameters) may change during the propagation, e.g. in a sequential-update control scheme.\nspecrange_method: Method to pass to the specrange function\nspecrange_buffer: An additional factor by which to enlarge the estimated  spectral range returned by specrange, in order to ensure that Chebychev coefficients are based on an overestimation of the spectral range.\ncheby_coeffs_limit: The maximum magnitude of Chebychev coefficients that should be treated as non-zero\ncheck_normalization: Check whether the Hamiltonian has been properly normalized, i.e., that the spectral range of generator has not been underestimated. This slowes down the propagation, but is advisable for novel generators.\nuniform_dt_tolerance=1e-12: How much the intervals of tlist are allowed to vary while still being considered constant.\nspecrange_kwargs: All further keyword arguments are passed to the specrange function\n\n\n\n\n\nnewton_propagator = init_prop(\n    state,\n    generator,\n    tlist,\n    method::Val{:newton};\n    inplace=true,\n    backward=false,\n    verbose=false,\n    parameters=nothing,\n    m_max=10,\n    func=(z -> exp(-1im * z)),\n    norm_min=1e-14,\n    relerr=1e-12,\n    max_restarts=50,\n    _...\n)\n\ninitializes a NewtonPropagator.\n\nMethod-specific keyword arguments\n\nm_max: maximum Krylov dimension, cf. NewtonWrk\nfunc, norm_min, relerr, max_restarts: parameter to pass to newton!\n\n\n\n\n\nexp_propagator = init_prop(\n    state,\n    generator,\n    tlist,\n    method::Val{:expprop};\n    inplace=true,\n    backward=false,\n    verbose=false,\n    parameters=nothing,\n    func=(H_dt -> exp(-1im * H_dt))\n    convert_state=_exp_prop_convert_state(state),\n    convert_operator=_exp_prop_convert_operator(generator),\n    _...\n)\n\ninitializes an ExpPropagator.\n\nMethod-specific keyword arguments\n\nfunc: The function to evaluate. The argument H_dt is obtained by constructing an operator H from generator via the evaluate function and the multiplied with the time step dt for the current time interval. The propagation then simply multiplies the return value of func with the current state\nconvert_state:  Type to which to temporarily convert states before multiplying the return value of func.\nconvert_operator: Type to which to convert the operator H before multiplying it with dt and plugging the result into func\n\nThe convert_state and convert_operator parameters are useful for when the generator and or state are unusual data structures for which the relevant methods to calculate func are not defined. Often, it is easier to temporarily convert them to standard complex matrices and vectors than to implement the missing methods.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.prop_step!","page":"QuantumPropagators","title":"QuantumPropagators.prop_step!","text":"Advance the propagator by a single time step.\n\nstate = prop_step!(propagator)\n\nreturns the state obtained from propagating to the next point on the time grid from propagator.t, respectively the previous point if propagator.backward is true.\n\nWhen the propagation would lead out of the time grid, prop_step! leaves propagator unchanged and returns nothing. Thus, a return value of nothing may be used to signal that a propagation has completed.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.propagate","page":"QuantumPropagators","title":"QuantumPropagators.propagate","text":"Propagate a state over an entire time grid.\n\nstate = propagate(\n    state,\n    generator,\n    tlist;\n    method=:auto,\n    backward=false,\n    inplace=true,\n    verbose=false,\n    piecewise=nothing,\n    pwc=nothing,\n    storage=nothing,\n    observables=<store state>,\n    callback=nothing,\n    showprogress=false,\n    init_prop_kwargs...)\n\npropagates state of the entire time grid and returns the propagates states, or a storage array of data collected during the propagation.\n\nArguments\n\nstate: The \"initial\" state for the propagation. For backward=false, this state is taken to be at initial time (tlist[begin]); and for backward=true, at the final time (tlist[end])\ngenerator: The time-dependent generator of the dynamics\ntlist: The time grid over which which the propagation is defined. This may or may not be equidistant.\n\nKeyword arguments\n\nmethod: The propagation method to use. The default value of :auto attempts to choose the best method available, based on the properties of the given state, tlist, and generator.\nbackward: If true, propagate backward in time\ninplace: If true, propagate using in-place operations. If false, avoid in-place operations. Not all propagation methods support both in-place and not-in-place propagation.\npiecewise: If given a a boolean, limit the propagation to \"piecewise\" methods, respectively disallow piecewise methods\npwc: If given a a boolean, limit the propagation to piecewise-constant methods, respectively disallow piecewise-constant methods\nstorage: Flag whether to store and return the propagated states / observables, or pre-allocated storage array. See Notes below.\nobservables: Converters for data to be stored in storage. See Notes below.\ncallback: Function to call after each propagation step. See Notes below.\nshowprogess: Whether to show a progress bar. See Notes below.\n\nAll remaining keyword arguments are passed to init_prop to initialize the Propagator that is used internally to drive the optimization. Unknown keyword arguments will be ignored.\n\nNotes\n\nIn general, there is no requirement that tlist has a constant time step, although some propagation methods (most notably cheby!) only support a uniform time grid.\n\nIf storage is given as a container pre-allocated via init_storage, it will be filled with data determined by the observables. Specifically, after each propagation step,\n\ndata = map_observables(observables, tlist, i, state)\nwrite_to_storage!(storage, i, data)\n\nis executed, where state is defined at time tlist[i]. See map_observables and write_to_storage! for details. The default values for observables results simply in the propagated states at every point in time being stored.\n\nThe storage parameter may also be given as true, and a new storage array will be created internally with init_storage and returned instead of the propagated state:\n\ndata = propagate(\n    state, generator, tlist; method=:auto\n    backward=false; storage=true, observables=observables,\n    callback=nothing, showprogress=false, kwargs...)\n\nIf backward is true, the input state is assumed to be at time tlist[end], and the propagation progresses backward in time (with a negative time step dt). If storage is given, it will be filled back-to-front during the backward propagation.\n\nIf callback is given as a callable, it will be called after each propagation step, as callback(propagator, observables) where propagator is Propagator object driving the propagation. The callback is called before calculating any observables. Example usage includes writing data to file, or modifying state via set_state!, e.g., removing amplitude from the lowest and highest level to mitigate \"truncation error\".\n\nIf showprogress is given as true, a progress bar will be shown for long-running propagationn. In order to customize the progress bar, showprogress may also be a function that receives length(tlist) and returns a ProgressMeter.Progress instance.\n\nIf in_place=false is given, the propagation avoids in-place operations. This is slower than inplace=true, but is often required in the context of automatic differentiation (AD), e.g., with Zygote. That is, use in_place=false if propagate is called inside a function to be passed to Zygote.gradient, Zygote.pullback, or a similar function. In an AD context, storage and showprogress should not be used.\n\nThe propagate routine returns the propagated state at tlist[end], respectively tlist[1] if backward=true, or a storage array with the stored states / observable data if storage=true.\n\nSee also\n\ninit_prop — Propagate via a Propagator object\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.reinit_prop!","page":"QuantumPropagators","title":"QuantumPropagators.reinit_prop!","text":"Re-initialize a propagator.\n\nreinit_prop!(propagator, state; kwargs...)\n\nresets the propagator to state at the beginning of the time grid, respectively the end of the time grid if propagator.backward is true.\n\nAt a minimum, this is equivalent to a call to set_state! follow by a call to set_t!, but some propagators may have additional requirements on re-initialization, such as refreshing expansion coefficients for ChebyPropagator. In this case, the kwargs may be additional keyword arguments specific to the concrete type of propagator.\n\n\n\n\n\nreinit_prop!(\n    propagator::ChebyPropagator,\n    state;\n    transform_control_ranges=((c, ϵ_min, ϵ_max, check) => (ϵ_min, ϵ_max)),\n    kwargs...\n)\n\nre-initializes an existing ChebyPropagator. This may or may not involve recalculating the Chebychev coefficients based on the current control amplitudes in propagator.parameters.\n\nMethod-specific keyword arguments\n\ntransform_control_ranges: a function (c, ϵ_min, ϵ_max, check) => (ϵ_min′, ϵ_max′). For each control c, the function is called with check=true and ϵ_min (ϵ_max) the current minimum (maximum) values for the control from propagator.parameters). The Chebychev coefficients will be recalculated if the existing coefficients were obtained assuming a range for c outside the returned ϵ_min′, ϵ_max′.\nIf the coefficients do need to be recalculated, transform_control_ranges is called a second time with check=false, and the returned (ϵ_min′, ϵ_max′) are used for estimating the new spectral range.\nFor example,\nfunction transform_control_ranges(c, ϵ_min, ϵ_max, check)\n    if check\n        return (min(ϵ_min, 2 * ϵ_min), max(ϵ_max, 2 * ϵ_max))\n    else\n        return (min(ϵ_min, 5 * ϵ_min), max(ϵ_max, 5 * ϵ_max))\n    end\nend\nwill re-calculate the Chebychev coefficients only if the current amplitudes differ by more than a factor of two from the ranges that were used when initializing the propagator (control_ranges parameter in init_prop, which would have had to overestimate the actual amplitudes by at least a factor of two).  When re-calculating, the control_ranges will overestimate the amplitudes by a factor of five. With this transform_control_ranges, the propagation will be stable as long as the amplitudes do not change dynamically by more than a factor of 2.5 from their original range, while also not re-calculating coefficients unnecessarily in each pass because of modest changes in the amplitudes.\nThe transform_control_ranges argument is only relevant in the context of optimal control, where the same propagator will be used for many iterations with changing control field amplitudes.\n\nAll other keyword arguments are ignored.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.AbstractPropagator","page":"QuantumPropagators","title":"QuantumPropagators.AbstractPropagator","text":"Abstract base type for all Propagator objects.\n\nAll Propagator objects must be instantiated via init_prop and implement the following interface.\n\nProperties\n\nstate (read-only): The current quantum state in the propagation\ntlist (read-only): The time grid for the propatation\nt (read-only): The time at which state is defined. An element of tlist.\nparameters: parameters that determine the dynamics. The structure of the parameters depends on the concrete Propagator type (i.e., the propagation method). Mutating the parameters affects subsequent propagation steps.\nbackward: Boolean flag to indicate whether the propagation moves forward or backward in time\ninplace: Boolean flag to indicate whether propagator.state is modified in-place or is recreated by every call of prop_step! or set_state!. For inplace=true, we find Ψ = propagator.state; prop_step!(propagator); propagator.state === Ψ to be true, while for inplace=false it is false.\n\nConcrete Propagator types may have additional properties or fields, but these should be considered private.\n\nMethods\n\nreinit_prop! — reset the propagator to a new initial state at the beginning of the time grid (or the end, for backward propagation)\nprop_step! – advance the propagator by one step forward (or backward) on the time grid.\nset_state! — safely mutate the current quantum state of the propagation. Note that directly mutating the state property is not safe. However, Ψ = propagator.state; foo_mutate!(Ψ), set_state!(propagator, Ψ) for some mutating function foo_mutate! is guaranteed to be safe and efficient for both in-place and not-in-place propagators.\nset_t! — safely mutate the current time (propagator.t), snapping to the values of tlist.\n\nSee also\n\nPiecewisePropagator — specialization of AbstractPropagator for piecewise propagation methods.\nPWCPropagator — specialization of PiecewisePropagator for piecewise-constant propagation methods.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_propagators/#QuantumPropagators.set_t!","page":"QuantumPropagators","title":"QuantumPropagators.set_t!","text":"Set the current time for the propagation.\n\nset_t!(propagator, t)\n\nSets propagator.t to the given value of t, where t must be an element of propagator.tlist.\n\nSee also\n\nset_state! — set propagator.state\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.PiecewisePropagator","page":"QuantumPropagators","title":"QuantumPropagators.PiecewisePropagator","text":"AbstractPropagator sub-type for piecewise propagators.\n\nA piecewise propagator is determined by a single parameter per control and time grid interval. Consequently, the propagator.parameters are a dictionary mapping the controls found in the generator via get_controls to a vector of values defined on the intervals of the time grid, see discretize_on_midpoints. This does not necessarily imply that these values are the piecewise-constant amplitudes for the intervals. A general piecwise propagatore might use interpolation to obtain actual amplitudes within any given time interval.\n\nWhen the amplitudes are piecewise-constant, the propagator should be a concrete intantiation of a PWCPropagator.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_propagators/#QuantumPropagators.choose_propmethod","page":"QuantumPropagators","title":"QuantumPropagators.choose_propmethod","text":"Choose a suitable propagation method.\n\nmethod = choose_propmethod(generator, state, tlist;\n                           pwc=nothing, piecewise=nothing, inplace=true)\n\nidentifies a suitable propagation method for the given generator, state and tlist. If piecewise or pwc are given as true, only consider methods that result in in a PiecewisePropagator or PWCPropagator, respectively. If piecewise or pwc are given as false, disregard any methods that result in these propagators. Only propagators that support the given inplace are taken into account.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.cheby_get_spectral_envelope","page":"QuantumPropagators","title":"QuantumPropagators.cheby_get_spectral_envelope","text":"Determine the spectral envelope of a generator.\n\nE_min, E_max = cheby_get_spectral_envelope(\n    generator, tlist, control_ranges, method; kwargs...\n)\n\nestimates a lower bound E_min the lowest eigenvalue of the generator for any values of the controls specified by control_ranges, and an upper bound E_max for the highest eigenvalue.\n\nThis is done by constructing operators from the extremal values for the controls as specified in control_ranges and taking the smallest/largest return values from specrange for those operators.\n\nArguments\n\ngenerator: dynamical generator, e.g. a time-dependent\ntlist: The time grid for the propagation\ncontrol_ranges: a dict that maps controls that occur in generator (cf. get_controls to a tuple of mimimum and maximum amplitude for that control\nmethod: method name to pass to  specrange\nkwargs: Any remaining keyword arguments are passed to specrange\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.set_state!","page":"QuantumPropagators","title":"QuantumPropagators.set_state!","text":"Set the current state of the propagator.\n\nset_state!(propagator, state)\n\nsets the propagator.state property. In order to mutate the current state after a call to prop_step!, the following pattern is recommended:\n\nΨ = propagator.state\nfoo_mutate!(Ψ)\nset_state!(propagator, Ψ)\n\nwhere foo_mutate! is some function that mutates Ψ.  This is guaranteed to work efficiently both for in-place and not-in-place propagators, without incurring unnecessary copies.\n\nwarning: Warning\nfoo_mutate!(propagator.state)by itself is not a safe operation. Always follow it byset_state!(propagator, propagator.state)\n\nSee also\n\nset_t! — set propagator.t.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.NewtonPropagator","page":"QuantumPropagators","title":"QuantumPropagators.NewtonPropagator","text":"Propagator for Newton propagation (method=:newton).\n\nThis is a PWCPropagator.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_propagators/#QuantumPropagators.ExpPropagator","page":"QuantumPropagators","title":"QuantumPropagators.ExpPropagator","text":"Propagator for propagation via direct exponentiation (method=:expprop)\n\nThis is a PWCPropagator.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_propagators/#QuantumPropagators.PWCPropagator","page":"QuantumPropagators","title":"QuantumPropagators.PWCPropagator","text":"PiecewisePropagator sub-type for piecewise-constant propagators.\n\nLike the more general PiecewisePropagator, this is characterized by propagator.parameters mapping the controls in the generator to a vector of amplitude value on the midpoints of the time grid intervals.\n\nThe propagation will use these values as constant within each interval.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_propagators/#QuantumPropagators.ChebyPropagator","page":"QuantumPropagators","title":"QuantumPropagators.ChebyPropagator","text":"Propagator for Chebychev propagation (method=:cheby).\n\nThis is a PWCPropagator.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_propagators/#QuantumPropagatorsAmplitudesAPI","page":"QuantumPropagators","title":"QuantumPropagators.Amplitudes","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Public:","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"LockedAmplitude\nShapedAmplitude","category":"page"},{"location":"api/quantum_propagators/#Reference-2","page":"QuantumPropagators","title":"Reference","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.Amplitudes.LockedAmplitude\nQuantumPropagators.Amplitudes.ShapedAmplitude","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.Amplitudes.LockedAmplitude","page":"QuantumPropagators","title":"QuantumPropagators.Amplitudes.LockedAmplitude","text":"A time-dependent amplitude that is not a control.\n\nampl = LockedAmplitude(shape)\n\nwraps around shape, which must be either a vector of values defined on the midpoints of a time grid or a callable shape(t).\n\nampl = LockedAmplitude(shape, tlist)\n\ndiscretizes shape to the midpoints of tlist.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_propagators/#QuantumPropagators.Amplitudes.ShapedAmplitude","page":"QuantumPropagators","title":"QuantumPropagators.Amplitudes.ShapedAmplitude","text":"Product of a fixed shape and a control.\n\nampl = ShapedAmplitude(control; shape=shape)\n\nproduces an amplitude a(t) = S(t) ϵ(t), where S(t) corresponds to shape and ϵ(t) corresponds to control. Both control and shape should be either a vector of values defined on the midpoints of a time grid or a callable control(t), respectively shape(t). In the latter case, ampl will also be callable.\n\nampl = ShapedAmplitude(control, tlist; shape=shape)\n\ndiscretizes control and shape to the midpoints of tlist.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_propagators/#QuantumPropagatorsArnoldiAPI","page":"QuantumPropagators","title":"QuantumPropagators.Arnoldi","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Private:","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"extend_arnoldi!\ndiagonalize_hessenberg_matrix\narnoldi!","category":"page"},{"location":"api/quantum_propagators/#Reference-3","page":"QuantumPropagators","title":"Reference","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.Arnoldi.extend_arnoldi!\nQuantumPropagators.Arnoldi.diagonalize_hessenberg_matrix\nQuantumPropagators.Arnoldi.arnoldi!","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.Arnoldi.extend_arnoldi!","page":"QuantumPropagators","title":"QuantumPropagators.Arnoldi.extend_arnoldi!","text":"Extend dimension of Hessenberg matrix by one.\n\nextend_arnoldi!(Hess, q, m, H, dt; norm_min=1e-15)\n\nextends the entries in Hess from size (m-1)×(m-1) to size m×m, and the list q of Arnoldi vectors from m to (m+1). It is assumed that the input Hess was created by a call to arnoldi! with extended=false or a previous call to extend_arnoldi!. Note that Hess itself is not resized, so it must be allocated to size m×m or greater on input.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Arnoldi.diagonalize_hessenberg_matrix","page":"QuantumPropagators","title":"QuantumPropagators.Arnoldi.diagonalize_hessenberg_matrix","text":"diagonalize_hessenberg_matrix(Hess, m; accumulate=false)\n\nDiagonalize the m × m top left submatrix of the given Hessenberg matrix.\n\nIf accumulate is true, return the concatenated eigenvalues for Hess[1:1,1:1] to Hess[1:m,1:m], that is, all sumatrices of size 1 through m.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Arnoldi.arnoldi!","page":"QuantumPropagators","title":"QuantumPropagators.Arnoldi.arnoldi!","text":"m = arnoldi!(Hess, q, m, Ψ, H, dt=1.0; extended=true, norm_min=1e-15)\n\nCalculate the Hessenberg matrix and Arnoldi vectors of H dt, from Ψ.\n\nFor a given order m, the m×m Hessemberg matrix is calculated and stored in in the pre-allocated Hess. Further  an array of m normalized Arnoldi vectors is stored in in the pre-allocated q, plus one additional unnormalized Arnoldi vector.  The unnormalized m+1st vector could be used to easily extend a given m×m Hessenberg matrix to a (m+1)×(m+1) matrix.\n\nIf the extended Hessenberg matrix is requested (extended=true, default), the m+1st Arnoldi vector is also normalized, and it's norm will be stored in m+1, m entry of the (extended) Hessenberg matrix, which is an (m+1)×(m+1) matrix.\n\nReturn the size m of the calculated Hessenberg matrix. This will usually be the input m, except when the Krylov dimension of H starting from Ψ is less then m. E.g., if Ψ is an eigenstate of H, the returned m will be 1.\n\nSee http://en.wikipedia.org/wiki/Arnoldi_iteration for a description of the algorithm.\n\nArguments\n\nHess::Matrix{ComplexF64}: Pre-allocated storage for the Hessemberg matrix.  Can be uninitialized on input. The matrix must be at least of size m×m, or  (m+1)×(m+1) if extended=true. On output, the m×m sub-matrix of Hess  (with the returned output m) will contain the Hessenberg matrix, and all  other elements of Hess be be set to zero.\nq: Pre-allocated array of states similar to Ψ, as storage for the calculated Arnoldi vectors. These may be un-initialized on input. Must be at least of length m+1\nm: The requested dimensions of the output Hessenberg matrix.\nΨ: The starting vector for the Arnoldi procedure. This can be of any type,  as long as Φ = H * Ψ results in a vector similar to Ψ, there is an inner  products of Φ and Ψ (Ψ⋅Φ is defined), and norm(Ψ) is defined.\nH: The operator (up to dt) for which to calculate the Arnoldi procedure. Can be of any type, as long as H * Ψ is defined.\ndt: The implicit time step; the total operator for which to calculate the Arnoldi procedure is H * dt\nextended: If true (default), calculate the extended Hessenberg matrix, and normalized the final Arnoldi vector\nnorm_min: the minimum value of the norm of Ψ at which Ψ should be  considered the zero vector\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagatorsChebyAPI","page":"QuantumPropagators","title":"QuantumPropagators.Cheby","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Public:","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"ChebyWrk\ncheby\ncheby!\ncheby_coeffs\ncheby_coeffs!","category":"page"},{"location":"api/quantum_propagators/#Reference-4","page":"QuantumPropagators","title":"Reference","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.Cheby.ChebyWrk\nQuantumPropagators.Cheby.cheby\nQuantumPropagators.Cheby.cheby!\nQuantumPropagators.Cheby.cheby_coeffs\nQuantumPropagators.Cheby.cheby_coeffs!","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.Cheby.ChebyWrk","page":"QuantumPropagators","title":"QuantumPropagators.Cheby.ChebyWrk","text":"Workspace for the Chebychev propagation routine.\n\nChebyWrk(Ψ, Δ, E_min, dt; limit=1e-12)\n\ninitializes the workspace for the propagation of a state similar to Ψ under a Hamiltonian with eigenvalues between E_min and E_min + Δ, and a time step dt. Chebychev coefficients smaller than the given limit are discarded.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_propagators/#QuantumPropagators.Cheby.cheby","page":"QuantumPropagators","title":"QuantumPropagators.Cheby.cheby","text":"Evaluate Ψ = exp(i- H dt) Ψ.\n\nΨ_out = cheby(Ψ, H, dt, wrk; E_min=nothing, check_normalization=false)\n\nacts like cheby! but does not modify Ψ in-place.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Cheby.cheby!","page":"QuantumPropagators","title":"QuantumPropagators.Cheby.cheby!","text":"Evaluate Ψ = exp(-i H dt) Ψ in-place.\n\ncheby!(Ψ, H, dt, wrk; E_min=nothing, check_normalization=false)\n\nArguments\n\nΨ: on input, initial vector. Will be overwritten with result.\nH: Hermitian operator\ndt: time step\nwrk: internal workspace\nE_min: minimum eigenvalue of H, to be used instead of the E_min from the  initialization of wrk. The same wrk may be used for different values  E_min, as long as the spectra radius Δ and the time step dt are the  same as those used for the initialization of wrk.\ncheck_normalizataion: perform checks that the H does not exceed the spectral radius for which the the workspace was initialized.\n\nThe routine will not allocate any internal storage. This implementation requires copyto! lmul!, and axpy! to be implemented for Ψ, and the three-argument mul! for Ψ and H.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Cheby.cheby_coeffs","page":"QuantumPropagators","title":"QuantumPropagators.Cheby.cheby_coeffs","text":"Calculate Chebychev coefficients.\n\na::Vector{Float64} = cheby_coeffs(Δ, dt; limit=1e-12)\n\nreturn an array of coefficiencts larger than limit.\n\nArguments\n\nΔ: the spectral radius of the underlying operator\ndt: the time step\n\nSee also cheby_coeffs! for an in-place version.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Cheby.cheby_coeffs!","page":"QuantumPropagators","title":"QuantumPropagators.Cheby.cheby_coeffs!","text":"Calculate Chebychev coefficients in-place.\n\nn::Int = cheby_coeffs!(coeffs, Δ, dt, limit=1e-12)\n\noverwrites the first n values in coeffs with new coefficients larger than limit for the given new spectral radius Δ and time step dt. The coeffs array will be resized if necessary, and may have a length > n on exit.\n\nSee also cheby_coeffs for an non-in-place version.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagatorsControlsAPI","page":"QuantumPropagators","title":"QuantumPropagators.Controls","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Public:","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"discretize\ndiscretize_on_midpoints\nevaluate\nevaluate!\nget_controls\nget_tlist_midpoints\nsubstitute","category":"page"},{"location":"api/quantum_propagators/#Reference-5","page":"QuantumPropagators","title":"Reference","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.Controls.discretize\nQuantumPropagators.Controls.discretize_on_midpoints\nQuantumPropagators.Controls.evaluate\nQuantumPropagators.Controls.evaluate!\nQuantumPropagators.Controls.get_controls\nQuantumPropagators.Controls.get_tlist_midpoints\nQuantumPropagators.Controls.substitute","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.Controls.discretize","page":"QuantumPropagators","title":"QuantumPropagators.Controls.discretize","text":"Evaluate control at every point of tlist.\n\nvalues = discretize(control, tlist; via_midpoints=true)\n\ndiscretizes the given control to a Vector of values defined on the points of tlist.\n\nIf control is a function, it will will first be evaluated at the midpoint of tlist, see discretize_on_midpoints, and then the values on the midpoints are converted to values on tlist. This discretization is more stable than directly evaluationg the control function at the values of tlist, and ensures that repeated round-trips between discretize and discretize_on_midpoints can be done safely, see the note in the documentation of discretize_on_midpoints.\n\nThe latter can still be achieved by passing via_midpoints=false. While such a direct discretization is suitable e.g. for plotting, but it is unsuitable for round-trips between discretize and discretize_on_midpoints  (constant controls on tlist may result in a zig-zag on the intervals of tlist).\n\nIf control is a vector, a copy of control will be returned if it is of the same length as tlist. Otherwise, control must have one less value than tlist, and is assumed to be defined on the midpoins of tlist. In that case, discretize acts as the inverse of discretize_on_midpoints. See discretize_on_midpoints for how control values on tlist and control values on the intervals of tlist are related.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Controls.discretize_on_midpoints","page":"QuantumPropagators","title":"QuantumPropagators.Controls.discretize_on_midpoints","text":"Evaluate control at the midpoints of tlist.\n\nvalues = discretize_on_midpoints(control, tlist)\n\ndiscretizes the given control to a Vector of values on the midpoints of tlist. Hence, the resulting values will contain one less value than tlist.\n\nIf control is a vector of values defined on tlist (i.e., of the same length as tlist), it will be converted to a vector of values on the intervals of tlist. The value for the first and last \"midpoint\" will remain the original values at the beginning and end of tlist, in order to ensure exact bounary conditions. For all other midpoints, the value for that midpoint will be calculated by \"un-averaging\".\n\nFor example, for a control and tlist of length 5, consider the following diagram:\n\ntlist index:       1   2   3   4   5\ntlist:             ⋅   ⋅   ⋅   ⋅   ⋅   input values cᵢ (i ∈ 1..5)\n                   |̂/ ̄ ̄ ̂\\ / ̂\\ / ̂ ̄ ̄\\|̂\nmidpoints:         x     x   x     x   output values pᵢ (i ∈ 1..4)\nmidpoints index:   1     2   3     4\n\nWe will have p₁=c₁ for the first value, p₄=c₅ for the last value. For all other points, the control values cᵢ = fracp_i-1 + p_i2 are the average of the values on the midpoints. This implies the \"un-averaging\" for the midpoint values pᵢ = 2 c_i - p_i-1.\n\nnote: Note\nAn arbitrary input control array may not be compatible with the above averaging formula. In this case, the conversion will be \"lossy\" (discretize will not recover the original control array; the difference should be considered a \"discretization error\"). However, any further round-trip conversions between points and intervals are bijective and preserve the boundary conditions. In this case, the discretize_on_midpoints and discretize methods are each other's inverse. This also implies that for an optimal control procedure, it is safe to modify midpoint values. Modifying the the values on the time grid directly on the other hand may accumulate discretization errors.\n\nIf control is a vector of one less length than tlist, a copy of control will be returned, under the assumption that the input is already properly discretized.\n\nIf control is a function, the function will be directly evaluated at the midpoints marked as x in the above diagram..\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Controls.evaluate","page":"QuantumPropagators","title":"QuantumPropagators.Controls.evaluate","text":"Evaluate all controls.\n\nIn general, evaluate(object, args...; vals_dict=IdDict()) evaluates the object for a specific point in time indicated by the positional args. Any control in object is evaluated at the specified point in time. Alternatively, the vals_dict maps a controls to value (\"plug in this value for the given control\")\n\nFor example,\n\nop = evaluate(generator, t)\n\nevaluates generator at time t. This requires that any control in generator is a callable that takes t as a single argument.\n\nop = evaluate(generator, tlist, n)\n\nevaluates generator for the n'th interval of tlist. This uses the definitions for the midpoints in discretize_on_midpoints. The controls in generator may be vectors (see discretize, discretize_on_midpoints) or callables of t.\n\nop = evaluate(generator, t; vals_dict)\nop = evaluate(generator, tlist, n; vals_dict)\n\nresolves any explicit time dependencies in generator at the specified point in time, but uses the value in the given vals_dict for any control in vals_dict.\n\na = evaluate(ampl, tlist, n; vals_dict=IdDict())\na = evaluate(ampl, t; vals_dict=IdDict())\n\nevaluates a control amplitude to a scalar by evaluating any explicit time dependency, and by replacing each control with the corresponding value in vals_dict.\n\nCalling evaluate for an object with no implicit or explicit time dependence should return the object unchanged.\n\nFor generators without any explicit time dependence,\n\nop = evaluate(generator; vals_dict)\n\ncan be used. The vals_dict in this case must contina values for all controls in generator.\n\nSee also:\n\nevaluate! — update an existing operator with a re-evaluation of a\n\ngenerator at a different point in time.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Controls.evaluate!","page":"QuantumPropagators","title":"QuantumPropagators.Controls.evaluate!","text":"Update an existing evaluation of a generator.\n\nevaluate!(op, generator, args..; vals_dict=IdDict())\n\nperforms an in-place update on an op the was obtained from a previous call to evaluate with the same generator, but for a different point in time and/or different values in vals_dict.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Controls.get_controls","page":"QuantumPropagators","title":"QuantumPropagators.Controls.get_controls","text":"Extract a Tuple of controls.\n\ncontrols = get_controls(generator)\n\nextracts the controls from a single dynamical generator.\n\nFor example, if generator = hamiltonian(H0, (H1, ϵ1), (H2, ϵ2)), extracts (ϵ1, ϵ2).\n\n\n\n\n\nget_controls(operator)\n\nfor a static operator (matrix) returns an empty tuple.\n\n\n\n\n\ncontrols = get_controls(objectives)\n\nextracts the controls from a list of objectives (i.e., from each objective's generator). Controls that occur multiple times in the different objectives will occur only once in the result.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Controls.get_tlist_midpoints","page":"QuantumPropagators","title":"QuantumPropagators.Controls.get_tlist_midpoints","text":"Shift time grid values the interval midpoints\n\ntlist_midpoints = get_tlist_midpoints(tlist)\n\ntakes a vector tlist of length n and returns a vector of length n-1 containing the midpoint values of each interval. The intervals in tlist are not required to be uniform.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Controls.substitute","page":"QuantumPropagators","title":"QuantumPropagators.Controls.substitute","text":"Substitute inside the given object.\n\nobject = substitute(object, replacements)\n\nreturns a modified object with the replacements defined in the given replacements dictionary. Things that can be replaced include operators, controls, and amplitudes. For example,\n\ngenerator = substitute(generator::Generator, replacements)\noperator = substitute(operator::Operator, replacements)\namplitude = substitute(amplitude, controls_replacements)\n\nNote that substitute cannot be used to replace dynamic quantities, e.g. controls, with static value. Use evaluate instead for that purpose.\n\n\n\n\n\nobjective = substitute(objective::Objective, replacements)\nobjectives = substitute(objectives::Vector{Objective}, replacements)\n\nrecursively substitutes the initial_state, generator, and target_state.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagatorsExpPropAPI","page":"QuantumPropagators","title":"QuantumPropagators.ExpProp","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Public:","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"ExpPropWrk\nexpprop!","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Private:","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"expprop","category":"page"},{"location":"api/quantum_propagators/#Reference-6","page":"QuantumPropagators","title":"Reference","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.ExpProp.ExpPropWrk\nQuantumPropagators.ExpProp.expprop!\nQuantumPropagators.ExpProp.expprop","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.ExpProp.ExpPropWrk","page":"QuantumPropagators","title":"QuantumPropagators.ExpProp.ExpPropWrk","text":"ExpPropWrk(v0)\n\nWorkspace for propagation via direct matrix exponentiation.\n\nInitializes the workspace for the propagation of a vector v0\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_propagators/#QuantumPropagators.ExpProp.expprop!","page":"QuantumPropagators","title":"QuantumPropagators.ExpProp.expprop!","text":"expprop!(Ψ, H, dt, wrk; func=(H_dt -> exp(-1im * H_dt)), _...)\n\nEvaluate Ψ = func(H*dt) Ψ by directly evaluating U = func(H*dt), i.e. by matrix exponentiation for the default func, and then multiplying U and Ψ in-place with mul!.\n\nThe workspace wrk must be initialized with ExpPropWrk to provide storage for a temporary state.\n\nKeyword arguments besides func are ignored.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.ExpProp.expprop","page":"QuantumPropagators","title":"QuantumPropagators.ExpProp.expprop","text":"Ψ_out = expprop(Ψ, H, dt, wrk; func=(H_dt -> exp(-1im * H_dt)), _...)\n\nevaluates Ψ_out = func(H*dt) Ψ as in expprop!, but not acting in-place.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagatorsGeneratorsAPI","page":"QuantumPropagators","title":"QuantumPropagators.Generators","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Public:","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Generator\nOperator\nScaledOperator\nhamiltonian\nliouvillian","category":"page"},{"location":"api/quantum_propagators/#Reference-7","page":"QuantumPropagators","title":"Reference","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.Generators.Generator\nQuantumPropagators.Generators.Operator\nQuantumPropagators.Generators.ScaledOperator\nQuantumPropagators.Generators.hamiltonian\nQuantumPropagators.Generators.liouvillian","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.Generators.Generator","page":"QuantumPropagators","title":"QuantumPropagators.Generators.Generator","text":"A time-dependent generator.\n\nGenerator(ops::Vector{OT}, amplitudes::Vector{AT})\n\nproduces an object of type Generator{OT,AT} that represents\n\nH(t)= H_0 + sum_l a_l(ϵ_l(t) t)  H_l\n\nwhere H_l are the ops and a_l(t) are the amplitudes. H(t) and H_l may represent operators in Hilbert space or super-operators in Liouville space. If the number of amplitudes is less than the number of ops, the first ops are considered as drift terms (H_0, respectively subsequent terms with a_l  1). At least one time-dependent amplitude is required. Each amplitude may depend on one or more control functions ϵ_l(t), although most typically a_l(t)  ϵ_l(t), that is, the amplitudes are simply a vector of the controls. See hamiltonian for details.\n\nA Generator object should generally not be instantiated directly, but via hamiltonian or liouvillian.\n\nThe list of ops and amplitudes are properties of the Generator. They should not be mutated.\n\nSee also\n\nOperator for static generators, which may be obtained from a Generator via evaluate.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_propagators/#QuantumPropagators.Generators.Operator","page":"QuantumPropagators","title":"QuantumPropagators.Generators.Operator","text":"A static operator in Hilbert or Liouville space.\n\nOperator(ops::Vector{OT}, coeffs::Vector{CT})\n\nproduces an object of type Operator{OT,CT} that encapsulates the \"lazy\" sum\n\nH = sum_l c_l H_l\n\nwhere H_l are the ops and c_l are the coeffs, which each must be a constant Number. If the number of coefficients is less than the number of operators, the first ops are considered to have c_l = 1.\n\nAn Operator object would generally not be instantiated directly, but be obtained from a Generator via evaluate.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_propagators/#QuantumPropagators.Generators.ScaledOperator","page":"QuantumPropagators","title":"QuantumPropagators.Generators.ScaledOperator","text":"A static operator with a scalar pre-factor.\n\nop = ScaledOperator(α, Ĥ)\n\nrepresents the \"lazy\" product α H where H is an operator (typically an Operator instance) and α is a scalar.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_propagators/#QuantumPropagators.Generators.hamiltonian","page":"QuantumPropagators","title":"QuantumPropagators.Generators.hamiltonian","text":"Initialize a (usually time-dependent) Hamiltonian.\n\nThe most common usage is, e.g.,\n\nusing QuantumPropagators\n\nH₀ = ComplexF64[0 0; 0 1];\nH₁ = ComplexF64[0 1; 1 0];\nϵ₁(t) = 1.0;\n\nhamiltonian(H₀, (H₀, ϵ₁))\n\n# output\n\nGenerator{Matrix{ComplexF64}, typeof(ϵ₁)}(<2 ops>, <1 amplitudes>)\n\nIn general,\n\nH = hamiltonian(terms...; check=true)\n\nconstructs a Hamiltonian based on the given terms. Each term must be an operator or a tuple (op, ampl) of an operator and a control amplitude. Single operators are considered \"drift\" terms.\n\nIn most cases, each control amplitude will simply be a control function or vector of pulse values. In general, ampl can be an arbitrary object that depends on one or more controls, which must be obtainable via get_controls(ampl).\n\nThe hamiltonian function will generally return a Generator instance. However, if none of the given terms are time-dependent, it may return a static operator (e.g., an AbstractMatrix or Operator):\n\nhamiltonian(H₀)\n# output\n2×2 Matrix{ComplexF64}:\n 0.0+0.0im  0.0+0.0im\n 0.0+0.0im  1.0+0.0im\n\nhamiltonian(H₀, (H₁, 2.0))\n# output\nOperator{Matrix{ComplexF64}, Float64}(<2 ops>, <1 coeffs>)\n\nThe hamiltonian function may generate warnings if the terms are of an unexpected type or structure as well was warnings or errors for any ampl that does not implement the interface required for control amplitudes.  These can be suppressed with check=false.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Generators.liouvillian","page":"QuantumPropagators","title":"QuantumPropagators.Generators.liouvillian","text":"Construct a Liouvillian Generator.\n\nℒ = liouvillian(Ĥ, c_ops=(); convention=:LvN, check=true)\n\ncalculates the sparse Liouvillian super-operator ℒ from the Hamiltonian Ĥ and a list c_ops of Lindblad operators.\n\nWith convention=:LvN, applying the resulting ℒ to a vectorized density matrix ρ⃗ calculates fracddt vecrho(t) = ℒ vecrho(t) equivalent to the Liouville-von-Neumann equation for the density matrix ρ,\n\nfracddt ρ(t)\n= -i H ρ(t) + sum_kleft(\n    A_k ρ A_k^dagger\n    - frac12 A_k^dagger A_k ρ\n    - frac12 ρ A_k^dagger A_k\n  right)\n\nwhere the Lindblad operators A_k are the elements of c_ops.\n\nThe Hamiltonian H will generally be time-dependent. For example, it may be a Generator as returned by hamiltonian. For example, for a Hamiltonian with the terms (Ĥ₀, (Ĥ₁, ϵ₁), (Ĥ₂, ϵ₂)), where Ĥ₀, Ĥ₁, Ĥ₂ are matrices, and ϵ₁ and ϵ₂ are functions of time, the resulting ℒ will be a Generator corresponding to terms (ℒ₀, (ℒ₁, ϵ₁), (ℒ₂, ϵ₂)), where the initial terms is the superoperator ℒ₀ for the static component of the Liouvillian, i.e., the commutator with the drift Hamiltonian Ĥ₀, plus the dissipator (sum over k), as a sparse matrix. Time-dependent Lindblad operators are not currently supported. The remaining elements are tuples (ℒ₁, ϵ₁) and (ℒ₂, ϵ₂) corresponding to the commutators with the two control Hamiltonians, where ℒ₁ and ℒ₂ again are sparse matrices.\n\nIf H is not time-dependent, the resulting ℒ will likewise be a static operator. Passing H=nothing with non-empty c_ops initializes a pure dissipator.\n\nWith convention=:TDSE, the Liouvillian will be constructed for the equation of motion i hbar fracddt vecrho(t) = ℒ vecrho(t) to match exactly the form of the time-dependent Schrödinger equation. While this notation is not standard in the literature of open quantum systems, it has the benefit that the resulting ℒ can be used in a numerical propagator for a (non-Hermitian) Schrödinger equation without any change. Thus, for numerical applications, convention=:TDSE is generally preferred. The returned ℒ between the two conventions differs only by a factor of i, since we generally assume hbar=1.\n\nThe convention keyword argument is mandatory, to force a conscious choice.\n\nSee Goerz et. al. \"Optimal control theory for a unitary operation under dissipative evolution\", arXiv 1312.0111v2, Appendix B.2 for the explicit construction of the Liouvillian superoperator as a sparse matrix.\n\nPassing check=false, suppresses warnings and errors about unexpected types or the structure of the arguments, cf. hamiltonian.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagatorsNewtonAPI","page":"QuantumPropagators","title":"QuantumPropagators.Newton","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Public:","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"NewtonWrk\nnewton!","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Private:","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"extend_newton_coeffs!\nextend_leja!","category":"page"},{"location":"api/quantum_propagators/#Reference-8","page":"QuantumPropagators","title":"Reference","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.Newton.NewtonWrk\nQuantumPropagators.Newton.newton!\nQuantumPropagators.Newton.extend_newton_coeffs!\nQuantumPropagators.Newton.extend_leja!","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.Newton.NewtonWrk","page":"QuantumPropagators","title":"QuantumPropagators.Newton.NewtonWrk","text":"NewtonWrk(v0, m_max=10)\n\nWorkspace for the Newton-with-restarted-Arnoldi propagation routine.\n\nInitializes the workspace for the propagation of a vector v0, using a maximum Krylov dimension of m_max in each restart iteration. Note that m_max should be smaller than the length of v0.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_propagators/#QuantumPropagators.Newton.newton!","page":"QuantumPropagators","title":"QuantumPropagators.Newton.newton!","text":"newton!(Ψ, H, dt, wrk; func=(z -> exp(-1im*z)), norm_min=1e-14, relerr=1e-12,\n        max_restarts=50, _...)\n\nEvaluate Ψ = func(H*dt) Ψ using a Newton-with-restarted-Arnoldi scheme.\n\nArguments\n\nΨ: The state to propagate, will be overwritten in-place with the propagated state\nH: Operator acting on Ψ. Together with dt, this is the argument to func\ndt: Implicit time step. Together with H, this is the argument to func\nwkr: Work array, initialized with NewtonWrk\nfunc: The function to apply to H dt, taking a single (scalar) complex-valued argument z in place of H dt. The default func is to evaluate the time evoluation operator for the Schrödinger equation\nnorm_min: the minium norm at which to consider a state similar to Ψ as zero\nrelerr: The relative error defining the convergence condition for the restart iteration. Propagation stops when the norm of the accumulated Ψ is stable up to the given relative error\nmax_restarts: The maximum number of restart iterations. Exceeding max_restarts will throw an AssertionError.\n\nAll other keyword arguments are ignored.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Newton.extend_newton_coeffs!","page":"QuantumPropagators","title":"QuantumPropagators.Newton.extend_newton_coeffs!","text":"extend_newton_coeffs!(a, n_a, leja, func, n_leja, radius)\n\nExtend the array a of existing Newton coefficients for the expansion of the func from n_a coefficients to n_leja coefficients. Return a new value n_a=n_a+n_leja with the total number of Newton coefficients in the updated a.\n\nArguments\n\na: On input, a zero-based array of length n_a or greater, containing Newton coefficients. On output, array containing a total n_leja coefficients. The array a will be resized if necessary, and may have a length greater than n_leja on output\nn_a:  The number of Newton coefficients in a, on input. Elements of a  beyond the first n_a elements will be overwritten.\nleja: Array of normalized Leja points, containing at least n_leja elements.\nfunc: Function for which to calcluate Newton coeffiecients\nn_leja: The number of elements in leja to use for calculating new coefficients, and the total number of Newton coefficients on output\nradius: Normalization radius for divided differences\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Newton.extend_leja!","page":"QuantumPropagators","title":"QuantumPropagators.Newton.extend_leja!","text":"extend_leja!(leja, n, newpoints, n_use)\n\nGiven an array of n (ordered) Leja points, extract n_use points from newpoints, and append them to the existing Leja points. The array leja should be sufficiently large to hold the new Leja points, which are appended after index n_old. It will be re-allocated if necessary and may have a size of up to 2*(n+n_use).\n\nArguments\n\nleja: Array of leja values. Must contain the \"old\" leja values to be kept  in leja(0:n-1). On output, n_use new leja points will be in  leja(n+:n+n_use-1), for the original value of n.  The leja array must  use zero-based indexing.\nn: On input, number of \"old\" leja points in leja. On output, total number of leja points (i.e. n=n+n_use)\nnewpoints: On input, candidate points for new leja points.  The n_use best values will be chosen and added to leja. On output, the values of new_points are undefined.\nn_use: Number of points that should be added to leja\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagatorsShapesAPI","page":"QuantumPropagators","title":"QuantumPropagators.Shapes","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Public:","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"blackman\nbox\nflattop","category":"page"},{"location":"api/quantum_propagators/#Reference-9","page":"QuantumPropagators","title":"Reference","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.Shapes.blackman\nQuantumPropagators.Shapes.box\nQuantumPropagators.Shapes.flattop","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.Shapes.blackman","page":"QuantumPropagators","title":"QuantumPropagators.Shapes.blackman","text":"Blackman window shape.\n\nblackman(t, t₀, T; a=0.16)\n\ncalculates\n\nB(t t_0 T) =\n    frac12left(\n        1 - a - cosleft(2π fract - t_0T - t_0right)\n        + a cosleft(4π fract - t_0T - t_0right)\n    right)\n\nfor a scalar t, with a = 0.16.\n\nSee http://en.wikipedia.org/wiki/Window_function#Blackman_windows\n\nA Blackman shape looks nearly identical to a Gaussian with a 6-sigma interval between t₀ and T.  Unlike the Gaussian, however, it will go exactly to zero at the edges. Thus, Blackman pulses are often preferable to Gaussians.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Shapes.box","page":"QuantumPropagators","title":"QuantumPropagators.Shapes.box","text":"Box shape (Theta-function).\n\nbox(t, t₀, T)\n\nevaluates the Heaviside (Theta-) function Theta(t) = 1 for t_0 le t le T; and Theta(t) = 0 otherwise.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Shapes.flattop","page":"QuantumPropagators","title":"QuantumPropagators.Shapes.flattop","text":"Flat shape (amplitude 1.0) with a switch-on/switch-off from zero.\n\nflattop(t; T, t_rise, t₀=0.0, t_fall=t_rise, func=:blackman)\n\nevaluates a shape function that starts at 0 at t=t₀, and ramps to to 1 during the t_rise interval. The function then remains at value 1, before ramping down to 0 again during the interval t_fall before T. For t  t₀ and t  T, the shape is zero.\n\nThe default switch-on/-off shape is half of a Blackman window (see blackman).\n\nFor func=:sinsq, the switch-on/-off shape is a sine-squared curve.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagatorsSpectralRangeAPI","page":"QuantumPropagators","title":"QuantumPropagators.SpectralRange","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Public:","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"specrange","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Private:","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"ritzvals\nrandom_state","category":"page"},{"location":"api/quantum_propagators/#Reference-10","page":"QuantumPropagators","title":"Reference","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.SpectralRange.specrange\nQuantumPropagators.SpectralRange.ritzvals\nQuantumPropagators.SpectralRange.random_state","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.SpectralRange.specrange","page":"QuantumPropagators","title":"QuantumPropagators.SpectralRange.specrange","text":"Calculate the spectral range of a Hamiltonian H on the real axis.\n\nE_min, E_max = specrange(H; method=:auto, kwargs...)\n\ncalculates the approximate lowest and highest eigenvalues of H. Any imaginary part in the eigenvalues is ignored: the routine is intended for (although not strictly limited to) a Hermitian H.\n\nThis delegates to\n\nspecrange(H, method; kwargs...)\n\nfor the different methods.\n\nThe default method=:auto chooses the best method for the given H. This is :diag for small matrices, and :arnoldi otherwise. Keyword arguments not relevant to the underlying implementation will be ignored.\n\n\n\n\n\nE_min, E_max = specrange(H, :arnoldi; state=random_state(H), m_min=20,\n                         m_max=60, prec=1e-3, norm_min=1e-15, enlarge=true)\n\nuses Arnoldi iteration with state as the starting vector. It approximates the eigenvalues of H with between m_min and m_max Ritz values, until the lowest and highest eigenvalue are stable to a releative precision of prec. The norm_min parameter is passed to the underlying arnoldi!.\n\nIf enlarge=true (default) the returned E_min and E_max will be enlarged via a heuristic to slightly over-estimate the spectral radius instead of under-estimating it.\n\n\n\n\n\nE_min, E_max = specrange(H, :diag)\n\nuses exact diagonization via the standard eigvals function to obtain the smallest and largest eigenvalue. This should only be used for relatively small matrices.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.SpectralRange.ritzvals","page":"QuantumPropagators","title":"QuantumPropagators.SpectralRange.ritzvals","text":"Calculate a vector for Ritz values converged to a given precision.\n\nR = ritzvals(G, state, m_min, m_max=2*m_min; prec=1e-5, norm_min=1e-15)\n\ncalculates a complex vector R of at least m_min and at most m_max Ritz values.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.SpectralRange.random_state","page":"QuantumPropagators","title":"QuantumPropagators.SpectralRange.random_state","text":"Random normalized quantum state.\n\n    Ψ = random_state(H)\n\nreturns a random normalized state compatible with the Hamiltonian H. This is intended to provide a starting vector for estimating the spectral radius of H via an Arnoldi method.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagatorsStorageAPI","page":"QuantumPropagators","title":"QuantumPropagators.Storage","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"Public:","category":"page"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"get_from_storage!\ninit_storage\nmap_observable\nmap_observables\nwrite_to_storage!","category":"page"},{"location":"api/quantum_propagators/#Reference-11","page":"QuantumPropagators","title":"Reference","text":"","category":"section"},{"location":"api/quantum_propagators/","page":"QuantumPropagators","title":"QuantumPropagators","text":"QuantumPropagators.Storage.get_from_storage!\nQuantumPropagators.Storage.init_storage\nQuantumPropagators.Storage.map_observable\nQuantumPropagators.Storage.map_observables\nQuantumPropagators.Storage.write_to_storage!","category":"page"},{"location":"api/quantum_propagators/#QuantumPropagators.Storage.get_from_storage!","page":"QuantumPropagators","title":"QuantumPropagators.Storage.get_from_storage!","text":"Obtain data from storage.\n\nget_from_storage!(data, storage, i)\n\nextracts data from the storage for the i'th time slot. Inverse of write_to_storage!. This modifies data in-place. If get_from_storage! is implemented for arbitrary observables, it is the developer's responsibility that init_storage,  write_to_storage!, and get_from_storage! are compatible.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Storage.init_storage","page":"QuantumPropagators","title":"QuantumPropagators.Storage.init_storage","text":"Create a storage array for propagation.\n\nstorage = init_storage(state, tlist)\n\ncreates a storage array suitable for storing a state for each point in tlist.\n\nstorage = init_storage(state, tlist, observables)\n\ncreates a storage array suitable for the data generated by the observables applied to state, see map_observables, for each point in tlist.\n\nstorage = init_storage(data, nt)\n\ncreates a storage arrays suitable for storing data nt times, where nt=length(tlist). By default, this will be a vector of typeof(data) and length nt, or a n × nt Matrix with the same eltype as data if data is a Vector of length n.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Storage.map_observable","page":"QuantumPropagators","title":"QuantumPropagators.Storage.map_observable","text":"Apply a single observable to state.\n\ndata = map_observable(observable, tlist, i, state)\n\nBy default, observable can be one of the following:\n\nA function taking the three arguments state, tlist, i, where state is defined at time tlist[i].\nA function taking a single argument state, under the assumption that the observable is time-independent\nA matrix for which to calculate the expectation value with respect to the vector state.\n\nThe default map_observables delegates to this function.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Storage.map_observables","page":"QuantumPropagators","title":"QuantumPropagators.Storage.map_observables","text":"Obtain \"observable\" data from state.\n\ndata = map_observables(observables, tlist, i, state)\n\ncalculates the data for a tuple of observables applied to state defined at time tlist[i]. For a single observable (tuple of length 1), simply return the result of map_observable.\n\nFor multiple observables, return the tuple resulting from applying map_observable for each observable. If the tuple is \"uniform\" (all elements are of the same type, e.g. if each observable calculates the expectation value of a Hermitian operator), it is converted to a Vector. This allows for compact storage in a storage array, see init_storage.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_propagators/#QuantumPropagators.Storage.write_to_storage!","page":"QuantumPropagators","title":"QuantumPropagators.Storage.write_to_storage!","text":"Place data into storage for time slot i.\n\nwrite_to_storage!(storage, i, data)\n\nfor a storage array created by init_storage stores the data obtained from map_observables at time slot i.\n\nConceptually, this corresponds roughly to storage[i] = data, but storage may have its own idea on how to store data for a specific time slot. For example, with the default init_storage Vector data will be stored in a matrix, and write_to_storage! will in this case write data to the i'th column of the matrix.\n\nFor a given type of storage and data, it is the developer's responsibility that init_storage and write_to_storage! are compatible.\n\n\n\n\n\n","category":"function"},{"location":"manual/#User-Manual","page":"User Manual","title":"User Manual","text":"","category":"section"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"The User Manual describes the API of the QuantumControl package by outlining the general procedure for defining and solving quantum control problems. See the API for a detailed reference.","category":"page"},{"location":"manual/#Setting-up-control-problems","page":"User Manual","title":"Setting up control problems","text":"","category":"section"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"Quantum control problems are described by instantiating ControlProblem. Remember that a quantum control problem aims to find control parameters in the dynamical generators (Hamiltonians, Liouvillians) of a quantum system to steer the dynamics of the system in some desired way. The dynamics of system are probed by one or more quantum states, each with its particular dynamical generator. To determine how well the system dynamics meet the desired behavior, we formulate an \"objective\" for each of those quantum states.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"Most commonly, this is represented by instantiating an Objective which contains the initial state, the generator for that state's dynamics, usually constructed via hamiltonian or liouvillian, and a target state. A time grid for the dynamics is part of ControlProblem as tlist. The objective is fulfilled when the control parameters are chosen such that the initial state evolves into the target state.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"A control problem with a single such objective already encodes the common state-to-state problem, e.g., to initialize a system into an entangled state, or to control a chemical reaction. However, there are many control problems that require simultaneously solving more than one objective. For example, finding the control parameters that implement a two-qubit quantum gate O on a quantum computer naturally translates into four simultaneous objectives, one for each two-qubit basis state: 00  O 00, 01  O 01, 10  O 10, 00  O 11. By virtue of the linearity of Hilbert space, finding a simultaneous solution to these four objectives means the any state Ψ will then evolve as Ψ  O Ψ.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"Some optimal control frameworks treat the optimization of quantum gates by numerically evolving the gate itself, U(t=0) = I  O(t=T). This is perfectly compatible with our framework: we can have a single objective for an initial \"state\" U with a target \"state\" O. However, this approach does not scale well numerically when the logical subspace of the two-qubit gate is embedded in a significantly larger physical Hilbert space: U is quadratically larger than Ψ. Moreover, the various methods implemented in the QuantumControl package are inherently parallel with respect to multiple objectives. This is why we emphasize the formulation of the control problem in terms of multiple simultaneous objectives.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"Sometimes, some of the objectives may be more important than others. In this case, the Objective can be instantiated with a weight attribute. There are also situations where the notion of a \"target state\" is not meaningful. Coming back to the example of two-qubit quantum gates, one may wish to maximize the entangling power of the quantum gate, without requiring a specific gate. We extract the information about the entangling power of the dynamical generator by tracking the time evolution of a set of states (the Bell basis, as it happens), but there is no meaningful notion of a \"target state\". In this example, an Objective may be instantiated without the target_state attribute, i.e., containing only the initial_state and the generator. These are the minimal required attributes for any optimization.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"Mathematically, the control problem is solved by minimizing a functional that is calculated from the time-propagated states in the objectives. By convention, this functional is passed as a keyword argument J_T when instantiating the ControlProblem. Standard functionals are defined in the QuantumControl.Functionals module. Depending on the control method, there can be additional options. See the documentation of the various methods implementing optimize for the options required or supported by the different solvers. All of these options can be passed as keyword arguments when instantiating the ControlProblem[1], or they can be passed later to optimize/@optimize_or_load.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"[1]: The solvers that ship with QuantumControl ignore options they do not know about. So when setting up a ControlProblem it is safe to pass a superset of options for different optimization methods.","category":"page"},{"location":"manual/#Controls-and-control-parameters","page":"User Manual","title":"Controls and control parameters","text":"","category":"section"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"The controls that the QuantumControl package optimizes are implicit in the dynamical generator (hamiltonian, liouvillian) of the Objectives in the ControlProblem.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"The QuantumControl.Controls.get_controls method extracts the controls from the objectives. Each control is typically time-dependent, e.g., a function ϵ(t) or a vector of pulse values on a time grid. For each control, QuantumControl.Controls.discretize and QuantumControl.Controls.discretize_on_midpoints discretizes the control to an existing time grid. For controls that are implemented through some custom type, these methods must be defined to enable piecewise-constant time propagation or an optimization that assumes piecewise-constant control (most notably, Krotov's method).","category":"page"},{"location":"manual/#Time-propagation","page":"User Manual","title":"Time propagation","text":"","category":"section"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"The QuantumControl package uses (and includes) QuantumPropagators.jl as the numerical back-end for simulating the time evolution of all quantum states. The main high-level function provided from that package is propagate, which simulates the dynamics of a quantum state over an entire time grid. In the context of a ControlProblem consisting of one or more Objective, there is also a propagate_objective function that provides a more convenient interface, automatically using the initial state and the dynamical generator from the objective.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"A very typical overall workflow is to set up the control problem, then propagate the objectives with the guess control to see how the system behaves, run the optimization, and then propagate the objectives again with the optimized controls, to verify the success of the optimization. For plugging in the optimized controls, propagate_objective has a controls_map argument.","category":"page"},{"location":"manual/#Optimization","page":"User Manual","title":"Optimization","text":"","category":"section"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"The most direct way to solve a ControlProblem is with the optimize routine. It has a mandatory method argument that then delegates the optimization to the appropriate sub-package implementing that method.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"However, if the optimization takes more than a few minutes to complete, you should use @optimize_or_load instead of just optimize. This routine runs the optimization and then writes the result to file. When called again, it will then simply load the result instead of rerunning the optimization. The @optimize_or_load also embeds some metadata in the output file, including (by default) the commit hash of the project repository containing the script that called @optimize_or_load and the filename of the script and line number where the call was made.","category":"page"},{"location":"manual/","page":"User Manual","title":"User Manual","text":"The output file written by @optimize_or_load can be read via the load_optimization function. This can recover both the optimization result and the metadata.","category":"page"},{"location":"api/quantum_control_index/","page":"Index","title":"Index","text":"EditURL = \"../../generate_api.jl\"","category":"page"},{"location":"api/quantum_control_index/#API-Index","page":"Index","title":"API Index","text":"","category":"section"},{"location":"api/quantum_control_index/","page":"Index","title":"Index","text":"","category":"page"},{"location":"examples/#examples-list","page":"List of Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Krotov-specific-examples","page":"List of Examples","title":"Krotov-specific examples","text":"","category":"section"},{"location":"examples/","page":"List of Examples","title":"List of Examples","text":"Optimization of a State-to-State Transfer in a Two-Level-System\nOptimization of a Dissipative Quantum Gate\nPulse Parametrization\nOptimization for a perfect entangler","category":"page"},{"location":"examples/#GRAPE-specific-examples","page":"List of Examples","title":"GRAPE-specific examples","text":"","category":"section"},{"location":"examples/","page":"List of Examples","title":"List of Examples","text":"Optimization of a State-to-State Transfer in a Two-Level-System\nOptimization for a perfect entangler","category":"page"},{"location":"glossary/#Glossary","page":"Glossary","title":"Glossary","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"In the context of the JuliaQuantumControl ecosystem, we apply the following nomenclature.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Generator","page":"Glossary","title":"Generator","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Dynamical generator (Hamiltonian / Liouvillian) for the time evolution of a state, i.e., the right-hand-side of the equation of motion (up to a factor of i) such that Ψ(t+dt) = e^-i H dt Ψ(t) in the infinitesimal limit. We use the symbols G, H, or L, depending on the context (general, Hamiltonian, Liouvillian).","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Examples for supported forms a Hamiltonian are the following, from the most general case to simplest and most common case of linear controls,","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"<img src=\"../assets/controlhams.svg\" width=\"80%\"/>","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"In Eq. (G1), H_0 is the Drift Term (which may be zero) and each term under the sum over l is a Control Term. Each control term is a Hamiltonian that depends on a set of control functions (or simply \"controls\"). The controls are the functions directly tunable via optimal control. The control term may also contain an explicit time dependence outside of the controls. This most general form (G1) is supported only via custom user-implemented generator objects, see the documentation of the QuantumPropagators package.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"More commonly, each control term is separable into the Control Amplitude a_l(t) and the Control Operator H_l, as in Eq. (G2). This is the most general form supported by the built-in Generator object, which can be initialized via the hamiltonian or liouvillian functions. The control amplitude a_l(t) depends in turn on one ore more function ϵ_l(t), where each ϵ_l(t) is as Control Function. It may also contain an explicit time dependence.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"In the most common case, a_l  ϵ_l, as in Eq. (G3). The control may further depend on a set of Control Parameters, ϵ_l(t) = ϵ_l(u_n).","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"In an open quantum system, the structure of Eqs. (G1–G3) is the same, but with Liouvillian (super-)operators acting on density matrices instead of Hamiltonians acting on state vectors. See liouvillian with convention=:TDSE.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Operator","page":"Glossary","title":"Operator","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"A static, non-time-dependent object that can be multiplied to a state. An operator can be obtained from a time-dependent Generator by plugging in values for the controls and potentially any explicit time dependence. For example, an Operator is obtained from a Generator via QuantumControl.Controls.evaluate.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Drift-Term","page":"Glossary","title":"Drift Term","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"A term in the dynamical generator that does not depend on any controls.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Control-Term","page":"Glossary","title":"Control Term","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"A term in the dynamical generator that depends on one or more controls.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Control-Function","page":"Glossary","title":"Control Function","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"(aka \"Control\") A function ϵ_l(t) in the Generator that is directly tuned by an optimal control method, either as Pulse values or via Control Parameters.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Control-Field","page":"Glossary","title":"Control Field","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"A function that corresponds directly to some kind of physical drive (laser amplitude, microwave pulse, etc.). The term can be ambiguous in that it usually corresponds to the Control Amplitude a(t), but depending on how the control problem is formulated, it can also correspond to the Control Function ϵ(t)","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Control-Operator","page":"Glossary","title":"Control Operator","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"(aka \"control Hamiltonian/Liouvillian\"). The operator H_l in Eqs. (G2, G3). This is a static operator which forms the Control Term together with a Control Amplitude. The control generator is not a well-defined concept in the most general case of non-separable controls terms, Eq. (G1).","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Control-Amplitude","page":"Glossary","title":"Control Amplitude","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"The time-dependent coefficient a_l(t) for the Control Operator in Eq. (G2). A control amplitude may depend on on or more control functions, as well as have an explicit time dependency. Some conceptual examples for control amplitudes and how they may depend on a Control Function are the following:","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Non-linear coupling of a control field to the operator, e.g., the quadratic coupling of the laser field to a Stark shift operator\nPulse Parametrization as a way to enforce bounds on a Control Field\nTransfer functions, e.g., to model the response of an electronic device to the optimal control field ϵ(t).\nNoise in the amplitude of the control function\nNon-controllable aspects of the control amplitude, e.g. a \"guided\" control amplitude a_l(t) = R(t) + ϵ_l(t) or a non-controllable envelope S(t) in a_l(t) = S(t) ϵ(t) that ensures switch-on- and switch-off in a CRAB pulse ϵ(t).","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"In Qiskit Dynamics, the \"control amplitude\" is called \"Signal\", see Connecting Qiskit Pulse with Qiskit Dynamics, where a Qiskit \"pulse\" corresponds roughly to our Control Function.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Control-Parameters","page":"Glossary","title":"Control Parameters","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Non-time-dependent parameters that a Control Function depends on, ϵ(t) = ϵ(u_n t). One common parametrization of a control field is as a Pulse, where the control parameters are the amplitude of the field at discrete points of a time grid. Parametrization as a \"pulse\" is implicit in Krotov's method and standard GRAPE.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"More generally, the control parameters could also be spectral coefficients (CRAB) or simple parameters for an analytic pulse shape (e.g., position, width, and amplitude of a Gaussian shape). All optimal control methods find optimized control fields by varying the control parameters.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Pulse","page":"Glossary","title":"Pulse","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"(aka \"control pulse\") A control field discretized to a time grid, usually on the midpoints of the time grid, in a piecewise-constant approximation. Stored as a vector of floating point values. The parametrization of a control field as a \"pulse\" is implicit for Krotov's method and standard GRAPE. One might think of these methods to optimize the control fields directly, but a conceptually cleaner understanding is to think of the discretized \"pulse\" as a vector of control parameters for the time-continuous control field.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Pulse-Parametrization","page":"Glossary","title":"Pulse Parametrization","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"A special case of a [Control Amplitude)(@ref) where a(t) = a(ϵ(t)) at every point in time. The purpose of this is to constrain the amplitude of the control amplitude a(t). See e.g. QuantumControl.PulseParametrizations.SquareParametrization, where a(t) = ϵ^2(t) to ensure that a(t) is positive. Since Krotov's method inherently has no constraints on the optimized control fields, pulse parameterization is a method of imposing constraints on the amplitude in this context.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Control-Derivative","page":"Glossary","title":"Control Derivative","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"The derivative of the dynamical Generator with respect to the control ϵ(t). In the case of linear controls terms in Eq. (G3), the control derivative is the Control Operator coupling to ϵ(t). In general, however, for non-linear control terms, the control derivatives still depends on the control fields and is thus time dependent. We commonly use the symbol μ for the control derivative (reminiscent of the dipole operator)","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Parameter-Derivative","page":"Glossary","title":"Parameter Derivative","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"The derivative of a control with respect to a single control parameter. The derivative of the dynamical Generator with respect to that control parameter is then the product of the Control Derivative and the parameter derivative.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/#Gradient","page":"Glossary","title":"Gradient","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"The derivative of the optimization functional with respect to all Control Parameters, i.e. the vector of all parameter derivatives.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"note: Note\nThe above nomenclature does not consistently extend throughout the quantum control literature: the terms \"control\"/\"control term\"/\"control Hamiltonian\", and \"control\"/\"control field\"/\"control function\"/\"control pulse\"/\"pulse\" are generally somewhat ambiguous. In particular, the distinction between \"control field\" and \"pulse\" (as a parametrization of the control field in terms of amplitudes on a time grid) here is somewhat artifcial and borrowed from the Krotov Python package. However, the terminology defined in this glossary is consistently applied within the JuliaQuantumControl organization, both in the documentation and in the names of members and methods.","category":"page"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"EditURL = \"../../generate_api.jl\"","category":"page"},{"location":"api/quantum_control_reference/#Local-Submodules","page":"Local Submodules","title":"Local Submodules","text":"","category":"section"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"The following submodules of QuantumControl are defined locally (as opposed to being re-exported from sub-packages).","category":"page"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"gdeftgttexttgt gdeftroperatornametr gdefReoperatornameRe gdefImoperatornameIm","category":"page"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"QuantumControl.Functionals\nQuantumControl.PulseParametrizations\nQuantumControl.Workflows","category":"page"},{"location":"api/quantum_control_reference/#QuantumControlFunctionalsLocalAPI","page":"Local Submodules","title":"QuantumControl.Functionals","text":"","category":"section"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"Public Members:","category":"page"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"J_T_re\nJ_T_sm\nJ_T_ss\nJ_a_fluence\ngate_functional\nmake_gate_chi","category":"page"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"Re-exported Members:","category":"page"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"make_chi\nmake_grad_J_a","category":"page"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"Private Members:","category":"page"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"chi_re!\nF_sm\nf_tau\nF_re\ngrad_J_a_fluence!\nF_ss\nchi_ss!\nchi_sm!","category":"page"},{"location":"api/quantum_control_reference/#Public-members","page":"Local Submodules","title":"Public members","text":"","category":"section"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"QuantumControl.Functionals.J_T_re\nQuantumControl.Functionals.J_T_sm\nQuantumControl.Functionals.J_T_ss\nQuantumControl.Functionals.J_a_fluence\nQuantumControl.Functionals.gate_functional\nQuantumControl.Functionals.make_gate_chi","category":"page"},{"location":"api/quantum_control_reference/#QuantumControl.Functionals.J_T_re","page":"Local Submodules","title":"QuantumControl.Functionals.J_T_re","text":"Real-part functional.\n\nJ_T_re(ϕ, objectives; τ=nothing)\n\ncalculates\n\nJ_Ttextre = 1 - F_textre quadin begincases\n    0 2  textin Hilbert space \n    0 1  textin Liouville space\nendcases\n\nAll arguments are passed to f_tau while evaluating F_textre in F_re.\n\nReference\n\n[12] Palao and Kosloff,  Phys. Rev. A 68, 062308 (2003)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControl.Functionals.J_T_sm","page":"Local Submodules","title":"QuantumControl.Functionals.J_T_sm","text":"Square-modulus functional.\n\nJ_T_sm(ϕ, objectives; τ=nothing)\n\ncalculates\n\nJ_Ttextsm = 1 - F_textsm quadin 0 1\n\nAll arguments are passed to f_tau while evaluating F_textsm in F_sm.\n\nReference\n\n[12] Palao and Kosloff,  Phys. Rev. A 68, 062308 (2003)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControl.Functionals.J_T_ss","page":"Local Submodules","title":"QuantumControl.Functionals.J_T_ss","text":"State-to-state phase-insensitive functional.\n\nJ_T_ss(ϕ, objectives; τ=nothing)\n\ncalculates\n\nJ_Ttextss = 1 - F_textss in 0 1\n\nAll arguments are passed to F_ss.\n\nReference\n\n[12] Palao and Kosloff,  Phys. Rev. A 68, 062308 (2003)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControl.Functionals.J_a_fluence","page":"Local Submodules","title":"QuantumControl.Functionals.J_a_fluence","text":"Running cost for the pulse fluence.\n\nJ_a = J_a_fluence(pulsevals, tlist)\n\ncalculates\n\nJ_a = sum_l int_0^T ϵ_l(t)^2 dt = left(sum_ln ϵ_ln^2 right) dt\n\nwhere ϵ_ln are the values in the (vectorized) pulsevals, n is the index of the intervals of the time grid, and dt is the time step, taken from the first time interval of tlist and assumed to be uniform.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControl.Functionals.gate_functional","page":"Local Submodules","title":"QuantumControl.Functionals.gate_functional","text":"Convert a functional from acting on a gate to acting on propagated states.\n\nJ_T = gate_functional(J_T_U; kwargs...)\n\nconstructs a functional J_T that meets the requirements for for Krotov/GRAPE and make_chi. That is, the output J_T takes positional positional arguments ϕ and objectives. The input functional J_T_U is assumed to have the signature J_T_U(U; kwargs...) where U is a matrix with elements U_ij = Ψ_iϕ_j, where Ψ_i is the initial_state of the i'th objectives (assumed to be the i'th canonical basis state) and ϕ_j is the result of forward-propagating Ψ_j. That is, U is the projection of the time evolution operator into the subspace defined by the basis in the initial_states of the  objectives.\n\nSee also\n\nmake_gate_chi — create a corresponding chi function that acts more efficiently than the general make_chi.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControl.Functionals.make_gate_chi","page":"Local Submodules","title":"QuantumControl.Functionals.make_gate_chi","text":"Return a function to evaluate χ_k = -J_T(U)ϕ_k via the chain rule.\n\nchi! = make_gate_chi(J_T_U, objectives; use_finite_differences=false, kwargs...)\n\nreturns a function equivalent to\n\nchi! = make_chi(gate_functional(J_T_U; kwargs...), objectives)\n\nbeginsplit\n    χ_k\n    = -fracϕ_k J_T \n    = - frac12 sum_i (_U J_T)_ik frac U_ikϕ_k \n    = - frac12 sum_i (_U J_T)_ik Ψ_i\nendsplit\n\nwhere Ψ_i is the basis state stored as the initial_state of the i'th objective, see gate_functional.\n\nThe gradient _U J_T is obtained via automatic differentiation, or via finite differences if use_finite_differences=true.\n\nCompared to the more general make_chi, make_gate_chi will generally have a slightly smaller numerical overhead, as it pushes the use of automatic differentiation down by one level.\n\nWith use_finite_differences=true, this routine serves to test and debug gradients for gate functionals obtained by automatic differentiation.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#Private-members","page":"Local Submodules","title":"Private members","text":"","category":"section"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"QuantumControl.Functionals.chi_re!\nQuantumControl.Functionals.F_sm\nQuantumControl.Functionals.f_tau\nQuantumControl.Functionals.F_re\nQuantumControl.Functionals.grad_J_a_fluence!\nQuantumControl.Functionals.F_ss\nQuantumControl.Functionals.chi_ss!\nQuantumControl.Functionals.chi_sm!","category":"page"},{"location":"api/quantum_control_reference/#QuantumControl.Functionals.chi_re!","page":"Local Submodules","title":"QuantumControl.Functionals.chi_re!","text":"Backward boundary states χ for functional J_T_re.\n\nchi_re!(χ, ϕ, objectives; τ=nothing)\n\nsets the elements of χ according to\n\nχ_k\n= -frac J_Ttextre ϕ_k(T)\n= frac12N w_k ϕ^tgt_k\n\nwith ϕ^tgt_k and w_k as defined in f_tau.\n\nNote: this function can be obtained with make_chi(J_T_re, objectives).\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControl.Functionals.F_sm","page":"Local Submodules","title":"QuantumControl.Functionals.F_sm","text":"Square-modulus fidelity.\n\nF_sm(ϕ, objectives; τ=nothing)\n\ncalculates\n\nF_textsm\n    = f_τ^2\n    = leftvertfrac1N sum_k=1^N w_k τ_krightvert^2\n    = frac1N^2 sum_k=1^N sum_j=1^N w_k w_j τ_k τ_j\n    quadin 0 1\n\nwith w_k the weight for the k'th objective and τ_k the overlap of the k'th propagated state with the k'th target state, τ_k the complex conjugate of τ_k, and N the number of objectives.\n\nAll arguments are passed to f_tau to evaluate f_τ.\n\nReference\n\n[12] Palao and Kosloff,  Phys. Rev. A 68, 062308 (2003)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControl.Functionals.f_tau","page":"Local Submodules","title":"QuantumControl.Functionals.f_tau","text":"Average complex overlap of the target states with forward-propagated states.\n\nf_tau(ϕ, objectives; τ=nothing)\n\ncalculates\n\nf_τ = frac1N sum_k=1^N w_k τ_k\n\nwith\n\nτ_k = ϕ_k^tgtϕ_k(T)\n\nin Hilbert space, or\n\nτ_k = trρ_k^tgtdagger ρ_k(T)\n\nin Liouville space, where ϕ_k or ρ_k are the elements of ϕ, and ϕ_k^tgt or ρ_k^tgt are the target states from the target_state field of the objectives. If τ is given as a keyword argument, it must contain the values τ_k according to the above definition. Otherwise, the τ_k values will be calculated internally.\n\nN is the number of objectives, and w_k is the weight attribute for each objective. The weights are not automatically normalized, they are assumed to have values such that the resulting f_τ lies in the unit circle of the complex plane. Usually, this means that the weights should sum to N.\n\nReference\n\n[12] Palao and Kosloff,  Phys. Rev. A 68, 062308 (2003)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControl.Functionals.F_re","page":"Local Submodules","title":"QuantumControl.Functionals.F_re","text":"Real-part fidelity.\n\nF_re(ϕ, objectives; τ=nothing)\n\ncalculates\n\nF_textre\n    = Ref_τ\n    = Releft\n        frac1N sum_k=1^N w_k τ_k\n    right\n    quadin begincases\n    -1 1  textin Hilbert space \n    0 1  textin Liouville space\nendcases\n\nwith w_k the weight for the k'th objective and τ_k the overlap of the k'th propagated state with the k'th target state, and N the number of objectives.\n\nAll arguments are passed to f_tau to evaluate f_τ.\n\nReference\n\n[12] Palao and Kosloff,  Phys. Rev. A 68, 062308 (2003)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControl.Functionals.grad_J_a_fluence!","page":"Local Submodules","title":"QuantumControl.Functionals.grad_J_a_fluence!","text":"Analytic derivative for J_a_fluence.\n\ngrad_J_a_fluence!(∇J_a, pulsevals, tlist)\n\nsets the (vectorized) elements of ∇J_a to 2 ϵ_ln dt, where ϵ_ln are the (vectorized) elements of pulsevals and dt is the time step, taken from the first time interval of tlist and assumed to be uniform.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControl.Functionals.F_ss","page":"Local Submodules","title":"QuantumControl.Functionals.F_ss","text":"State-to-state phase-insensitive fidelity.\n\nF_ss(ϕ, objectives; τ=nothing)\n\ncalculates\n\nF_textss = frac1N sum_k=1^N w_k τ_k^2 quadin 0 1\n\nwith N, w_k and τ_k as in f_tau.\n\nReference\n\n[12] Palao and Kosloff,  Phys. Rev. A 68, 062308 (2003)\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControl.Functionals.chi_ss!","page":"Local Submodules","title":"QuantumControl.Functionals.chi_ss!","text":"Backward boundary states χ for functional J_T_ss.\n\nchi_ss!(χ, ϕ, objectives; τ=nothing)\n\nsets the elements of χ according to\n\nχ_k\n= -frac J_Ttextss ϕ_k(T)\n= frac1N w_k τ_k ϕ^tgt_k\n\nwith ϕ^tgt_k, τ_k and w_k as defined in f_tau.\n\nNote: this function can be obtained with make_chi(J_T_ss, objectives).\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControl.Functionals.chi_sm!","page":"Local Submodules","title":"QuantumControl.Functionals.chi_sm!","text":"Backward boundary states χ for functional J_T_sm.\n\nchi_sm!(χ, ϕ, objectives; τ=nothing)\n\nsets the elements of χ according to\n\nχ_k\n= -fracpartial J_Ttextsmpartial ϕ_k(T)\n= frac1N^2 w_k sum_j^N w_j τ_j ϕ_k^tgt\n\nwith ϕ^tgt_k, τ_j and w_k as defined in f_tau.\n\nNote: this function can be obtained with make_chi(J_T_sm, objectives).\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControlPulseParametrizationsLocalAPI","page":"Local Submodules","title":"QuantumControl.PulseParametrizations","text":"","category":"section"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"Public Members:","category":"page"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"LogisticParametrization\nLogisticSqParametrization\nParametrizedAmplitude\nSquareParametrization\nTanhParametrization\nTanhSqParametrization","category":"page"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"Private Members:","category":"page"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"PulseParametrization","category":"page"},{"location":"api/quantum_control_reference/#Public-members-2","page":"Local Submodules","title":"Public members","text":"","category":"section"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"QuantumControl.PulseParametrizations.LogisticParametrization\nQuantumControl.PulseParametrizations.LogisticSqParametrization\nQuantumControl.PulseParametrizations.ParametrizedAmplitude\nQuantumControl.PulseParametrizations.SquareParametrization\nQuantumControl.PulseParametrizations.TanhParametrization\nQuantumControl.PulseParametrizations.TanhSqParametrization","category":"page"},{"location":"api/quantum_control_reference/#QuantumControl.PulseParametrizations.LogisticParametrization","page":"Local Submodules","title":"QuantumControl.PulseParametrizations.LogisticParametrization","text":"Parametrization with a Logistic function that enforces a_min < a(t) < a_max.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControl.PulseParametrizations.LogisticSqParametrization","page":"Local Submodules","title":"QuantumControl.PulseParametrizations.LogisticSqParametrization","text":"Parametrization with a Logistic-Square function that enforces 0 ≤ a(t) < a_max.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControl.PulseParametrizations.ParametrizedAmplitude","page":"Local Submodules","title":"QuantumControl.PulseParametrizations.ParametrizedAmplitude","text":"An amplitude determined by a pulse parametrization.\n\nThat is, a(t) = a(ϵ(t)) with a bijective mapping between the value of a(t) and ϵ(t), e.g. a(t) = ϵ^2(t) (a SquareParametrization). Optionally, the amplitude may be multiplied with an additional shape function, cf. ShapedAmplitude.\n\nampl = ParametrizedAmplitude(control; parametrization)\n\ninitilizes a(t) = a(ϵ(t) where ϵ(t) is the control, and the mandatory keyword argument parametrization is a PulseParametrization. The control must either be a vector of values discretized to the midpoints of a time grid, or a callable control(t).\n\nampl = ParametrizedAmplitude(control; parametrization, shape=shape)\n\ninitializes a(t) = S(t) a(ϵ(t)) where S(t) is the given shape. It must be a vector if control is a vector, or a callable shape(t) if control is a callable.\n\nampl = ParametrizedAmplitude(control, tlist; parametrization, shape=shape)\n\ndiscretizes control and shape (if given) to the midpoints of tlist before initialization.\n\nampl = ParametrizedAmplitude(\n    amplitude, tlist; parametrization, shape=shape, parametrize=true\n)\n\ninitializes a(t) = S(t) a(t) where a(t) is the input amplitude. First, if amplitude is a callable amplitude(t), it is discretized to the midpoints of tlist. Then, a control ϵ(t) is calculated so that a(t)  a(ϵ(t)). Clippling may occur if the values in amplitude cannot represented with the given parametrization. Lastly, ParametrizedAmplitude(control; parametrization, shape) is initialized with the calculated control.\n\nNote that the tlist keyword argument is required when parametrize=true is given, even if amplitude is already a vector.\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_control_reference/#QuantumControl.PulseParametrizations.SquareParametrization","page":"Local Submodules","title":"QuantumControl.PulseParametrizations.SquareParametrization","text":"Parametrization a(t) = ϵ²(t), enforcing pulse values a(t)  0.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControl.PulseParametrizations.TanhParametrization","page":"Local Submodules","title":"QuantumControl.PulseParametrizations.TanhParametrization","text":"Parametrization with a tanh function that enforces a_min < a(t) < a_max.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControl.PulseParametrizations.TanhSqParametrization","page":"Local Submodules","title":"QuantumControl.PulseParametrizations.TanhSqParametrization","text":"Parametrization with a tanh² function that enforces 0 ≤ a(t) < a_max.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#Private-members-2","page":"Local Submodules","title":"Private members","text":"","category":"section"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"QuantumControl.PulseParametrizations.PulseParametrization","category":"page"},{"location":"api/quantum_control_reference/#QuantumControl.PulseParametrizations.PulseParametrization","page":"Local Submodules","title":"QuantumControl.PulseParametrizations.PulseParametrization","text":"Specification for a \"time-local\" pulse parametrization.\n\nThe parametrization is given as a collection of three functions:\n\na(ϵ(t))\nϵ(a(t))\naϵ as a function of ϵ(t).\n\n\n\n\n\n","category":"type"},{"location":"api/quantum_control_reference/#QuantumControlWorkflowsLocalAPI","page":"Local Submodules","title":"QuantumControl.Workflows","text":"","category":"section"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"Public Members:","category":"page"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"@optimize_or_load\nload_optimization\nrun_or_load\nsave_optimization","category":"page"},{"location":"api/quantum_control_reference/#Public-members-3","page":"Local Submodules","title":"Public members","text":"","category":"section"},{"location":"api/quantum_control_reference/","page":"Local Submodules","title":"Local Submodules","text":"QuantumControl.Workflows.@optimize_or_load\nQuantumControl.Workflows.load_optimization\nQuantumControl.Workflows.run_or_load\nQuantumControl.Workflows.save_optimization","category":"page"},{"location":"api/quantum_control_reference/#QuantumControl.Workflows.@optimize_or_load","page":"Local Submodules","title":"QuantumControl.Workflows.@optimize_or_load","text":"Run optimize and store the result, or load the result if it exists.\n\nresult = @optimize_or_load(\n    file,\n    problem;\n    method,\n    force=false,\n    verbose=true,\n    metadata=nothing,\n    kwargs...\n)\n\nruns result = optimize(problem; method, kwargs...) and stores result in file in the JLD2 format. Note that the method keyword argument is mandatory. In addition to the result, the data in the output file can also contain metadata. By default, this is \"script\" with the file name and line number of where @optimize_or_load was called, as well as data from the dict metadata mapping arbitrary (string) keys to values.\n\nIf file already exists (and force=false), load the result from that file instead of running the optimization.\n\nAll other kwargs are passed directly to optimize.\n\nFor methods that support this, @optimize_or_load will set up a callback to dump the optimization result to file in case of an unexpected program shutdown, see set_atexit_save_optimization.\n\nRelated Functions\n\nrun_or_load  — a function for more general long-running calculations.\nload_optimization: Function to load a file produced by @optimize_or_load\n\n\n\n\n\n","category":"macro"},{"location":"api/quantum_control_reference/#QuantumControl.Workflows.load_optimization","page":"Local Submodules","title":"QuantumControl.Workflows.load_optimization","text":"Load a previously stored optimization.\n\nresult = load_optimization(file; verbose=true, kwargs...)\n\nrecovers a result previously stored by @optimize_or_load or save_optimization.\n\nresult, metadata = load_optimization(file; return_metadata=true, kwargs...)\n\nalso obtains a metadata dict, see @optimize_or_load. This dict maps string keys to values.\n\nCalling load_optimization with verbose=true (default) will @info the metadata after loading the file\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControl.Workflows.run_or_load","page":"Local Submodules","title":"QuantumControl.Workflows.run_or_load","text":"Run some code and write the result to file, or load from the file if it exists.\n\ndata = run_or_load(\n    file;\n    save=(endswith(file, \".jld2\") ? JLD2.save_object : FileIO.save),\n    load=(endswith(file, \".jld2\") ? JLD2.load_object : FileIO.load),\n    force=false,\n    verbose=true,\n    kwargs...\n) do\n    data = Dict()  # ...  # something that can be saved to / loaded from file\n    return data\nend\n\nruns the code in the block and stores data in the given file. If file already exists, skip running the code and instead return the data in file.\n\nIf force is True, run the code whether or not file exists, potentially overwriting it.\n\nWith verbose=true, information about the status of file will be shown as @info.\n\nThe data returned by the code block must be compatible with the format of file and the save/load functions. When using JLD2.save_object and JLD2.load_object, almost any data can be written, so this should be particularly safe. More generally, when using FileIO.save and FileIO.load, see the FileIO registry for details. A common examples would be a DataFrame being written to a .csv file.\n\nSee also\n\n@optimize_or_load — for wrapping around optimize\nDrWatson.@produce_or_load — a similar but more opinionated function with automatic naming\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control_reference/#QuantumControl.Workflows.save_optimization","page":"Local Submodules","title":"QuantumControl.Workflows.save_optimization","text":"Write an optimization result to file.\n\nsave_optimization(file, result; metadata=nothing)\n\nwrites the result obtained from a call to optimize to the given file in JLD2 format. If given, metadata is a dict of additional data that will be stored with the result. The metadata dict should use strings as keys.\n\nSee also\n\nload_optimization: Function to load a file produced by @optimize_or_load or save_optimization\n@optimize_or_load: Run optimize and save_optimization in one go.\n\n\n\n\n\n","category":"function"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"EditURL = \"../../generate_api.jl\"","category":"page"},{"location":"api/quantum_control/#QuantumControlAPI","page":"QuantumControl","title":"QuantumControl","text":"","category":"section"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"QuantumControl (re-)exports the following symbols:","category":"page"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"@optimize_or_load\nControlProblem\nObjective\nhamiltonian\ninit_prop\nliouvillian\nload_optimization\noptimize\nprop_step!\npropagate\npropagate_objective\npropagate_objectives\nreinit_prop!\nrun_or_load\nsave_optimization","category":"page"},{"location":"api/quantum_control/#QuantumControlAmplitudesAPI","page":"QuantumControl","title":"QuantumControl.Amplitudes","text":"","category":"section"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"QuantumControl.Amplitudes.LockedAmplitude\nQuantumControl.Amplitudes.ShapedAmplitude","category":"page"},{"location":"api/quantum_control/#QuantumControlControlsAPI","page":"QuantumControl","title":"QuantumControl.Controls","text":"","category":"section"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"QuantumControl.Controls.discretize\nQuantumControl.Controls.discretize_on_midpoints\nQuantumControl.Controls.evaluate\nQuantumControl.Controls.evaluate!\nQuantumControl.Controls.get_control_deriv\nQuantumControl.Controls.get_control_derivs\nQuantumControl.Controls.get_controls\nQuantumControl.Controls.get_tlist_midpoints\nQuantumControl.Controls.substitute","category":"page"},{"location":"api/quantum_control/#QuantumControlFunctionalsAPI","page":"QuantumControl","title":"QuantumControl.Functionals","text":"","category":"section"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"QuantumControl.Functionals.J_T_re\nQuantumControl.Functionals.J_T_sm\nQuantumControl.Functionals.J_T_ss\nQuantumControl.Functionals.J_a_fluence\nQuantumControl.Functionals.gate_functional\nQuantumControl.Functionals.make_chi\nQuantumControl.Functionals.make_gate_chi\nQuantumControl.Functionals.make_grad_J_a","category":"page"},{"location":"api/quantum_control/#QuantumControlGeneratorsAPI","page":"QuantumControl","title":"QuantumControl.Generators","text":"","category":"section"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"QuantumControl.Generators.Generator\nQuantumControl.Generators.Operator\nQuantumControl.Generators.ScaledOperator\nQuantumControl.Generators.hamiltonian\nQuantumControl.Generators.liouvillian","category":"page"},{"location":"api/quantum_control/#QuantumControlPulseParametrizationsAPI","page":"QuantumControl","title":"QuantumControl.PulseParametrizations","text":"","category":"section"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"QuantumControl.PulseParametrizations.LogisticParametrization\nQuantumControl.PulseParametrizations.LogisticSqParametrization\nQuantumControl.PulseParametrizations.ParametrizedAmplitude\nQuantumControl.PulseParametrizations.SquareParametrization\nQuantumControl.PulseParametrizations.TanhParametrization\nQuantumControl.PulseParametrizations.TanhSqParametrization","category":"page"},{"location":"api/quantum_control/#QuantumControlShapesAPI","page":"QuantumControl","title":"QuantumControl.Shapes","text":"","category":"section"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"QuantumControl.Shapes.blackman\nQuantumControl.Shapes.box\nQuantumControl.Shapes.flattop","category":"page"},{"location":"api/quantum_control/#QuantumControlStorageAPI","page":"QuantumControl","title":"QuantumControl.Storage","text":"","category":"section"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"QuantumControl.Storage.get_from_storage!\nQuantumControl.Storage.init_storage\nQuantumControl.Storage.map_observable\nQuantumControl.Storage.map_observables\nQuantumControl.Storage.write_to_storage!","category":"page"},{"location":"api/quantum_control/#QuantumControlWorkflowsAPI","page":"QuantumControl","title":"QuantumControl.Workflows","text":"","category":"section"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"QuantumControl.Workflows.@optimize_or_load\nQuantumControl.Workflows.load_optimization\nQuantumControl.Workflows.run_or_load\nQuantumControl.Workflows.save_optimization","category":"page"},{"location":"api/quantum_control/#Subpackages","page":"QuantumControl","title":"Subpackages","text":"","category":"section"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"QuantumControl contains the following sub-packages from the JuliaQuantumControl organization:","category":"page"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"QuantumPropagators\nQuantumControlBase\nKrotov\nGRAPE","category":"page"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"These (and their submodules) can be accessed directly, e.g.","category":"page"},{"location":"api/quantum_control/","page":"QuantumControl","title":"QuantumControl","text":"julia> using QuantumControl\n\njulia> QuantumControl.QuantumPropagators.SpectralRange.specrange\nspecrange (generic function with 5 methods)","category":"page"},{"location":"#QuantumControl.jl","page":"Home","title":"QuantumControl.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Markdown\nusing Pkg\n\nVERSION = Pkg.dependencies()[Base.UUID(\"8a270532-f23f-47a8-83a9-b33d10cad486\")].version\n\ngithub_badge = \"[![Github](https://img.shields.io/badge/JuliaQuantumControl-QuantumControl.jl-blue.svg?logo=github)](https://github.com/JuliaQuantumControl/QuantumControl.jl)\"\n\nversion_badge = \"![v$VERSION](https://img.shields.io/badge/version-v$VERSION-green.svg)\"\n\nMarkdown.parse(\"$github_badge $version_badge\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"QuantumControl.jl is a Julia framework for quantum dynamics and control.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Quantum optimal control [1][2][3][4][5][6][7][8] attempts to steer a quantum system in some desired way by finding optimal control parameters or control fields inside the system Hamiltonian or Liouvillian. Typical control tasks are the preparation of a specific quantum state or the realization of a logical gate in a quantum computer (\"pulse level control\"). Thus, quantum control theory is a critical part of realizing quantum technologies at the lowest level. Numerical methods of open-loop quantum control (methods that do not involve measurement feedback from a physical quantum device) such as Krotov's method [9][10][11][12][13][14] and GRAPE [15][16] address the control problem by simulating the dynamics of the system and then iteratively improving the value of a functional that encodes the desired outcome.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The QuantumControl.jl package collects the packages in the JuliaQuantumControl organization and provides a single coherent API for solving the quantum control problem.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See the installation instructions on Github.\nLook at a simple example for a state-to-state transition with Krotov's method to get a feeling for how the QuantumControl package is intended to be used, or look at the larger list of Examples.\nRead the Glossary and User Manual to understand the philosophy of the framework.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"glossary.md\",\n    \"manual.md\",\n    \"howto.md\",\n]\nDepth = 2","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"examples/index.md\",\n]","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"api/quantum_control.md\",\n]\nDepth = 1","category":"page"},{"location":"#Sub-Packages","page":"Home","title":"Sub-Packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"api/quantum_propagators.md\",\n    \"api/quantum_control_base.md\",\n    \"api/krotov.md\",\n    \"api/grape.md\",\n]\nDepth = 1","category":"page"},{"location":"#History","page":"Home","title":"History","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See the Releases on Github.","category":"page"}]
}
